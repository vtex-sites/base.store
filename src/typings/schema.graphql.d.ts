/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */


type Maybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  VTEX_StringOrBoolean: any;
  VTEX_AttachmentSchema: any;
  VTEX_AttachmentContent: any;
  VTEX_InputValues: any;
  /**
   * ProductCategoriesObject is a Record<string, string>, in the following format:
   * { '<categoryNumber>': '<categoryName>' }
   */
  VTEX_ProductCategoriesObject: any;
  VTEX_MatchedParameters: any;
  VTEX_OfferingInfo: any;
};










type File = Node & {
  sourceInstanceName: Scalars['String'];
  absolutePath: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  size: Scalars['Int'];
  prettySize: Scalars['String'];
  modifiedTime: Scalars['Date'];
  accessTime: Scalars['Date'];
  changeTime: Scalars['Date'];
  birthTime: Scalars['Date'];
  root: Scalars['String'];
  dir: Scalars['String'];
  base: Scalars['String'];
  ext: Scalars['String'];
  name: Scalars['String'];
  relativeDirectory: Scalars['String'];
  dev: Scalars['Int'];
  mode: Scalars['Int'];
  nlink: Scalars['Int'];
  uid: Scalars['Int'];
  gid: Scalars['Int'];
  rdev: Scalars['Int'];
  ino: Scalars['Float'];
  atimeMs: Scalars['Float'];
  mtimeMs: Scalars['Float'];
  ctimeMs: Scalars['Float'];
  atime: Scalars['Date'];
  mtime: Scalars['Date'];
  ctime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  birthtimeMs: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type FileModifiedTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileAccessTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileChangeTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileBirthTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileAtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileMtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileCtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

/** Node Interface */
type Node = {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type Internal = {
  content: Maybe<Scalars['String']>;
  contentDigest: Scalars['String'];
  description: Maybe<Scalars['String']>;
  fieldOwners: Maybe<Array<Maybe<Scalars['String']>>>;
  ignoreType: Maybe<Scalars['Boolean']>;
  mediaType: Maybe<Scalars['String']>;
  owner: Scalars['String'];
  type: Scalars['String'];
};


type Directory = Node & {
  sourceInstanceName: Scalars['String'];
  absolutePath: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  size: Scalars['Int'];
  prettySize: Scalars['String'];
  modifiedTime: Scalars['Date'];
  accessTime: Scalars['Date'];
  changeTime: Scalars['Date'];
  birthTime: Scalars['Date'];
  root: Scalars['String'];
  dir: Scalars['String'];
  base: Scalars['String'];
  ext: Scalars['String'];
  name: Scalars['String'];
  relativeDirectory: Scalars['String'];
  dev: Scalars['Int'];
  mode: Scalars['Int'];
  nlink: Scalars['Int'];
  uid: Scalars['Int'];
  gid: Scalars['Int'];
  rdev: Scalars['Int'];
  ino: Scalars['Float'];
  atimeMs: Scalars['Float'];
  mtimeMs: Scalars['Float'];
  ctimeMs: Scalars['Float'];
  atime: Scalars['Date'];
  mtime: Scalars['Date'];
  ctime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  birthtimeMs: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type DirectoryModifiedTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryAccessTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryChangeTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryBirthTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryAtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryMtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryCtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type Site = Node & {
  buildTime: Maybe<Scalars['Date']>;
  siteMetadata: Maybe<SiteSiteMetadata>;
  proxy: Maybe<Array<Maybe<SiteProxy>>>;
  flags: Maybe<SiteFlags>;
  polyfill: Maybe<Scalars['Boolean']>;
  pathPrefix: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type SiteBuildTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type SiteProxy = {
  prefix: Maybe<Scalars['String']>;
  url: Maybe<Scalars['String']>;
};

type SiteFlags = {
  DEV_SSR: Maybe<Scalars['Boolean']>;
  FAST_DEV: Maybe<Scalars['Boolean']>;
  LMDB_STORE: Maybe<Scalars['Boolean']>;
  PARALLEL_SOURCING: Maybe<Scalars['Boolean']>;
  PARALLEL_QUERY_RUNNING: Maybe<Scalars['Boolean']>;
  PRESERVE_FILE_DOWNLOAD_CACHE: Maybe<Scalars['Boolean']>;
};

type SiteSiteMetadata = {
  title: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  titleTemplate: Maybe<Scalars['String']>;
  author: Maybe<Scalars['String']>;
  siteUrl: Maybe<Scalars['String']>;
};

type SiteFunction = Node & {
  functionRoute: Scalars['String'];
  pluginName: Scalars['String'];
  originalAbsoluteFilePath: Scalars['String'];
  originalRelativeFilePath: Scalars['String'];
  relativeCompiledFilePath: Scalars['String'];
  absoluteCompiledFilePath: Scalars['String'];
  matchPath: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type SitePage = Node & {
  path: Scalars['String'];
  component: Scalars['String'];
  internalComponentName: Scalars['String'];
  componentChunkName: Scalars['String'];
  matchPath: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  isCreatedByStatefulCreatePages: Maybe<Scalars['Boolean']>;
  context: Maybe<SitePageContext>;
  pluginCreator: Maybe<SitePlugin>;
  pluginCreatorId: Maybe<Scalars['String']>;
};

type SitePageContext = {
  id: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  _xparams: Maybe<SitePageContext_Xparams>;
};

type SitePageContext_Xparams = {
  slug: Maybe<Scalars['String']>;
};

type StoreCollectionSeo = {
  title: Scalars['String'];
  description: Scalars['String'];
};

type StoreCollectionType =
  | 'Department'
  | 'Category'
  | 'Brand'
  | 'Cluster';

type StoreCollectionFacet = {
  key: Scalars['String'];
  value: Scalars['String'];
};

type StoreCollectionMeta = {
  selectedFacets: Array<StoreCollectionFacet>;
};

type StoreCollection = Node & {
  id: Scalars['ID'];
  remoteId: Scalars['ID'];
  slug: Scalars['String'];
  seo: StoreCollectionSeo;
  type: StoreCollectionType;
  meta: StoreCollectionMeta;
  /** Returns all children nodes filtered by type StoreCollection */
  childrenStoreCollection: Maybe<Array<Maybe<StoreCollection>>>;
  /** Returns the first child node of type StoreCollection or null if there are no children of given type on this node */
  childStoreCollection: Maybe<StoreCollection>;
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type StoreVtex = {
  productSearch: Maybe<StoreProductSearch>;
};

type StoreProductSearch = {
  products: Maybe<Array<Maybe<StoreProduct>>>;
};

type StoreProduct = Node & {
  remoteTypeName: Scalars['String'];
  id: Scalars['ID'];
  slug: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  productID: Maybe<Scalars['ID']>;
  brand: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  categoryTree: Maybe<Array<Maybe<StoreCategory>>>;
  clusterHighlights: Maybe<Array<Maybe<StoreClusterHighlight>>>;
  productClusters: Maybe<Array<Maybe<StoreProductClusters>>>;
  items: Maybe<Array<Maybe<StoreSku>>>;
  skuSpecifications: Maybe<Array<Maybe<StoreSkuSpecification>>>;
  link: Maybe<Scalars['String']>;
  linkText: Maybe<Scalars['String']>;
  productId: Maybe<Scalars['ID']>;
  productName: Maybe<Scalars['String']>;
  properties: Maybe<Array<Maybe<StoreProperty>>>;
  propertyGroups: Maybe<Array<Maybe<StorePropertyGroup>>>;
  productReference: Maybe<Scalars['String']>;
  titleTag: Maybe<Scalars['String']>;
  metaTagDescription: Maybe<Scalars['String']>;
  recommendations: Maybe<StoreRecommendation>;
  jsonSpecifications: Maybe<Scalars['String']>;
  benefits: Maybe<Array<Maybe<StoreBenefit>>>;
  specificationGroups: Maybe<Array<Maybe<StoreSpecificationGroup>>>;
  priceRange: Maybe<StoreProductPriceRange>;
  releaseDate: Maybe<Scalars['String']>;
  selectedProperties: Maybe<Array<Maybe<StoreSelectedProperty>>>;
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type StoreCategory = {
  remoteTypeName: Scalars['String'];
  cacheId: Maybe<Scalars['ID']>;
  href: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  id: Maybe<Scalars['Int']>;
  name: Maybe<Scalars['String']>;
  titleTag: Maybe<Scalars['String']>;
  hasChildren: Maybe<Scalars['Boolean']>;
  metaTagDescription: Maybe<Scalars['String']>;
  children: Maybe<Array<Maybe<StoreCategory>>>;
};

type StoreClusterHighlight = {
  remoteTypeName: Scalars['String'];
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

type StoreProductClusters = {
  remoteTypeName: Scalars['String'];
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

type StoreSku = {
  remoteTypeName: Scalars['String'];
  itemId: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  nameComplete: Maybe<Scalars['String']>;
  complementName: Maybe<Scalars['String']>;
  ean: Maybe<Scalars['String']>;
  referenceId: Maybe<Array<Maybe<StoreReference>>>;
  measurementUnit: Maybe<Scalars['String']>;
  unitMultiplier: Maybe<Scalars['Float']>;
  kitItems: Maybe<Array<Maybe<StoreKitItem>>>;
  images: Maybe<Array<Maybe<StoreImage>>>;
  videos: Maybe<Array<Maybe<StoreVideo>>>;
  sellers: Maybe<Array<Maybe<StoreSeller>>>;
  variations: Maybe<Array<Maybe<StoreProperty>>>;
  attachments: Maybe<Array<Maybe<StoreAttachment>>>;
  estimatedDateArrival: Maybe<Scalars['String']>;
};

type StoreReference = {
  remoteTypeName: Scalars['String'];
  Key: Maybe<Scalars['String']>;
  Value: Maybe<Scalars['String']>;
};

type StoreKitItem = {
  remoteTypeName: Scalars['String'];
  itemId: Maybe<Scalars['ID']>;
  amount: Maybe<Scalars['Int']>;
  product: Maybe<StoreOnlyProduct>;
  sku: Maybe<StoreSku>;
};

type StoreOnlyProduct = {
  remoteTypeName: Scalars['String'];
  brand: Maybe<Scalars['String']>;
  categoryId: Maybe<Scalars['ID']>;
  categoryTree: Maybe<Array<Maybe<StoreCategory>>>;
  clusterHighlights: Maybe<Array<Maybe<StoreClusterHighlight>>>;
  productClusters: Maybe<Array<Maybe<StoreProductClusters>>>;
  description: Maybe<Scalars['String']>;
  link: Maybe<Scalars['String']>;
  linkText: Maybe<Scalars['String']>;
  productId: Maybe<Scalars['ID']>;
  productName: Maybe<Scalars['String']>;
  properties: Maybe<Array<Maybe<StoreProperty>>>;
  propertyGroups: Maybe<Array<Maybe<StorePropertyGroup>>>;
  productReference: Maybe<Scalars['String']>;
  recommendations: Maybe<StoreRecommendation>;
  jsonSpecifications: Maybe<Scalars['String']>;
};

type StoreProperty = {
  remoteTypeName: Scalars['String'];
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Scalars['String']>>>;
};

type StorePropertyGroup = {
  remoteTypeName: Scalars['String'];
  name: Maybe<Scalars['String']>;
  properties: Maybe<Array<Maybe<Scalars['String']>>>;
};

type StoreRecommendation = {
  remoteTypeName: Scalars['String'];
  buy: Maybe<Array<Maybe<StoreProduct>>>;
  view: Maybe<Array<Maybe<StoreProduct>>>;
  similars: Maybe<Array<Maybe<StoreProduct>>>;
};

type StoreImage = {
  remoteTypeName: Scalars['String'];
  cacheId: Maybe<Scalars['ID']>;
  imageId: Maybe<Scalars['ID']>;
  imageLabel: Maybe<Scalars['String']>;
  imageTag: Maybe<Scalars['String']>;
  imageUrl: Maybe<Scalars['String']>;
  imageText: Maybe<Scalars['String']>;
};

type StoreVideo = {
  remoteTypeName: Scalars['String'];
  videoUrl: Maybe<Scalars['String']>;
};

type StoreSeller = {
  remoteTypeName: Scalars['String'];
  sellerId: Maybe<Scalars['ID']>;
  sellerName: Maybe<Scalars['String']>;
  addToCartLink: Maybe<Scalars['String']>;
  sellerDefault: Maybe<Scalars['Boolean']>;
  commertialOffer: Maybe<StoreOffer>;
};

type StoreOffer = {
  remoteTypeName: Scalars['String'];
  Installments: Maybe<Array<Maybe<StoreInstallment>>>;
  AvailableQuantity: Maybe<Scalars['Float']>;
  Price: Maybe<Scalars['Float']>;
  ListPrice: Maybe<Scalars['Float']>;
  spotPrice: Maybe<Scalars['Float']>;
  teasers: Array<Maybe<StoreTeaser>>;
  PriceWithoutDiscount: Maybe<Scalars['Float']>;
  RewardValue: Maybe<Scalars['Float']>;
  PriceValidUntil: Maybe<Scalars['String']>;
  Tax: Maybe<Scalars['Float']>;
  taxPercentage: Maybe<Scalars['Float']>;
  CacheVersionUsedToCallCheckout: Maybe<Scalars['String']>;
  DeliverySlaSamples: Maybe<Array<Maybe<StoreDeliverySlaSamples>>>;
  discountHighlights: Array<Maybe<StoreDiscount>>;
  giftSkuIds: Maybe<Array<Maybe<Scalars['String']>>>;
  gifts: Maybe<Array<Maybe<StoreGift>>>;
};

type StoreInstallment = {
  remoteTypeName: Scalars['String'];
  Name: Maybe<Scalars['String']>;
  TotalValuePlusInterestRate: Maybe<Scalars['Float']>;
  Value: Maybe<Scalars['Float']>;
  NumberOfInstallments: Maybe<Scalars['Int']>;
  InterestRate: Maybe<Scalars['Float']>;
  PaymentSystemName: Maybe<Scalars['String']>;
  PaymentSystemGroupName: Maybe<Scalars['String']>;
};

type StoreTeaser = {
  remoteTypeName: Scalars['String'];
  name: Maybe<Scalars['String']>;
  conditions: Maybe<StoreTeaserCondition>;
  effects: Maybe<StoreTeaserEffects>;
};

type StoreDeliverySlaSamples = {
  remoteTypeName: Scalars['String'];
  DeliverySlaPerTypes: Maybe<Array<Maybe<StoreDeliverySlaPerTypes>>>;
  Region: Maybe<StoreRegion>;
};

type StoreDeliverySlaPerTypes = {
  remoteTypeName: Scalars['String'];
  TypeName: Maybe<Scalars['String']>;
  Price: Maybe<Scalars['Float']>;
  EstimatedTimeSpanToDelivery: Maybe<Scalars['String']>;
};

type StoreRegion = {
  remoteTypeName: Scalars['String'];
  IsPersisted: Maybe<Scalars['Boolean']>;
  IsRemoved: Maybe<Scalars['Boolean']>;
  Id: Maybe<Scalars['ID']>;
  Name: Maybe<Scalars['String']>;
  CountryCode: Maybe<Scalars['String']>;
  ZipCode: Maybe<Scalars['String']>;
  CultureInfoName: Maybe<Scalars['String']>;
};

type StoreDiscount = {
  remoteTypeName: Scalars['String'];
  name: Maybe<Scalars['String']>;
};

type StoreTeaserCondition = {
  remoteTypeName: Scalars['String'];
  minimumQuantity: Maybe<Scalars['Int']>;
  parameters: Maybe<Array<Maybe<StoreTeaserValue>>>;
};

type StoreTeaserValue = {
  remoteTypeName: Scalars['String'];
  name: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type StoreTeaserEffects = {
  remoteTypeName: Scalars['String'];
  parameters: Maybe<Array<Maybe<StoreTeaserValue>>>;
};

type StoreGift = {
  remoteTypeName: Scalars['String'];
  productName: Maybe<Scalars['String']>;
  skuName: Maybe<Scalars['String']>;
  brand: Maybe<Scalars['String']>;
  linkText: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  images: Maybe<Array<Maybe<StoreGiftImage>>>;
};

type StoreGiftImage = {
  remoteTypeName: Scalars['String'];
  imageUrl: Maybe<Scalars['String']>;
  imageLabel: Maybe<Scalars['String']>;
  imageText: Maybe<Scalars['String']>;
};

type StoreAttachment = {
  remoteTypeName: Scalars['String'];
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  required: Maybe<Scalars['Boolean']>;
  domainValues: Maybe<Array<Maybe<StoreDomainValues>>>;
  content: Maybe<Scalars['JSON']>;
};


type StoreDomainValues = {
  remoteTypeName: Scalars['String'];
  FieldName: Maybe<Scalars['String']>;
  MaxCaracters: Maybe<Scalars['String']>;
  DomainValues: Maybe<Scalars['String']>;
};

type StoreSkuSpecification = {
  remoteTypeName: Scalars['String'];
  field: Maybe<StoreSkuSpecificationField>;
  values: Maybe<Array<Maybe<StoreSkuSpecificationValue>>>;
};

type StoreSkuSpecificationField = {
  remoteTypeName: Scalars['String'];
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

type StoreSkuSpecificationValue = {
  remoteTypeName: Scalars['String'];
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

type StoreBenefit = {
  remoteTypeName: Scalars['String'];
  featured: Maybe<Scalars['Boolean']>;
  id: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  items: Maybe<Array<Maybe<StoreBenefitItem>>>;
  teaserType: Maybe<Scalars['String']>;
};

type StoreBenefitItem = {
  remoteTypeName: Scalars['String'];
  benefitProduct: Maybe<StoreProduct>;
  benefitSKUIds: Maybe<Array<Maybe<Scalars['String']>>>;
  discount: Maybe<Scalars['Float']>;
  minQuantity: Maybe<Scalars['Int']>;
};

type StoreSpecificationGroup = {
  remoteTypeName: Scalars['String'];
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  specifications: Maybe<Array<Maybe<StoreSpecificationGroupProperty>>>;
};

type StoreSpecificationGroupProperty = {
  remoteTypeName: Scalars['String'];
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Scalars['String']>>>;
};

type StoreProductPriceRange = {
  remoteTypeName: Scalars['String'];
  sellingPrice: Maybe<StorePriceRange>;
  listPrice: Maybe<StorePriceRange>;
};

type StorePriceRange = {
  remoteTypeName: Scalars['String'];
  highPrice: Maybe<Scalars['Float']>;
  lowPrice: Maybe<Scalars['Float']>;
};

type StoreSelectedProperty = {
  remoteTypeName: Scalars['String'];
  key: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type SitePlugin = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  resolve: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
  pluginOptions: Maybe<SitePluginPluginOptions>;
  nodeAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  browserAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  ssrAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  pluginFilepath: Maybe<Scalars['String']>;
  packageJson: Maybe<SitePluginPackageJson>;
};

type SitePluginPluginOptions = {
  name: Maybe<Scalars['String']>;
  short_name: Maybe<Scalars['String']>;
  start_url: Maybe<Scalars['String']>;
  icon: Maybe<Scalars['String']>;
  background_color: Maybe<Scalars['String']>;
  theme_color: Maybe<Scalars['String']>;
  display: Maybe<Scalars['String']>;
  cache_busting_mode: Maybe<Scalars['String']>;
  legacy: Maybe<Scalars['Boolean']>;
  theme_color_in_head: Maybe<Scalars['Boolean']>;
  crossOrigin: Maybe<Scalars['String']>;
  include_favicon: Maybe<Scalars['Boolean']>;
  env: Maybe<SitePluginPluginOptionsEnv>;
  defer: Maybe<Scalars['Boolean']>;
  server: Maybe<Scalars['String']>;
  basePath: Maybe<Scalars['String']>;
  sizes: Maybe<Array<Maybe<Scalars['String']>>>;
  color: Maybe<Scalars['String']>;
  showSpinner: Maybe<Scalars['Boolean']>;
  src: Maybe<Scalars['String']>;
  _generated: Maybe<Scalars['String']>;
  compare: Maybe<Scalars['Boolean']>;
  baseline: Maybe<Scalars['Boolean']>;
  html: Maybe<Scalars['Boolean']>;
  json: Maybe<Scalars['Boolean']>;
  outDir: Maybe<Scalars['String']>;
  stats: Maybe<SitePluginPluginOptionsStats>;
  tenant: Maybe<Scalars['String']>;
  environment: Maybe<Scalars['String']>;
  workspace: Maybe<Scalars['String']>;
  minProducts: Maybe<Scalars['Int']>;
  httpOptions: Maybe<Array<Maybe<Array<Maybe<Scalars['String']>>>>>;
  serverOptions: Maybe<Array<Maybe<Array<Maybe<Scalars['String']>>>>>;
  path: Maybe<Scalars['String']>;
  pathCheck: Maybe<Scalars['Boolean']>;
  allExtensions: Maybe<Scalars['Boolean']>;
  isTSX: Maybe<Scalars['Boolean']>;
  jsxPragma: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsEnv = {
  production: Maybe<SitePluginPluginOptionsEnvProduction>;
  branch_deploy: Maybe<SitePluginPluginOptionsEnvBranch_Deploy>;
  deploy_preview: Maybe<SitePluginPluginOptionsEnvDeploy_Preview>;
};

type SitePluginPluginOptionsEnvProduction = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvProductionPolicy>>>;
};

type SitePluginPluginOptionsEnvProductionPolicy = {
  userAgent: Maybe<Scalars['String']>;
  allow: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsEnvBranch_Deploy = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicy>>>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicy = {
  userAgent: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsEnvDeploy_Preview = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicy>>>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicy = {
  userAgent: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsStats = {
  context: Maybe<Scalars['String']>;
};

type SitePluginPackageJson = {
  name: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
  main: Maybe<Scalars['String']>;
  license: Maybe<Scalars['String']>;
  dependencies: Maybe<Array<Maybe<SitePluginPackageJsonDependencies>>>;
  devDependencies: Maybe<Array<Maybe<SitePluginPackageJsonDevDependencies>>>;
  peerDependencies: Maybe<Array<Maybe<SitePluginPackageJsonPeerDependencies>>>;
  keywords: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPackageJsonDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SitePluginPackageJsonDevDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SitePluginPackageJsonPeerDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  buildTime: Maybe<Scalars['Date']>;
};


type SiteBuildMetadataBuildTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type Channel = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  salesChannel: Maybe<Scalars['Int']>;
  canonicalBaseAddress: Maybe<Scalars['String']>;
  alternateBaseAddresses: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultLocale: Maybe<Scalars['String']>;
  supportedLocales: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultCurrency: Maybe<Scalars['String']>;
  supportedCurrencies: Maybe<Array<Maybe<Scalars['String']>>>;
  targetProduct: Maybe<Scalars['String']>;
};

type Vtex_ProductUniqueIdentifier = {
  field: Vtex_ProductUniqueIdentifierField;
  value: Scalars['ID'];
};

type Vtex_ProductUniqueIdentifierField =
  | 'id'
  | 'slug'
  | 'ean'
  | 'reference'
  | 'sku';

type Vtex_Product = {
  /** Brand of the product */
  brand: Maybe<Scalars['String']>;
  /** Id of the brand of the product */
  brandId: Maybe<Scalars['Int']>;
  /** linkText is used as cacheId */
  cacheId: Maybe<Scalars['ID']>;
  categoryId: Maybe<Scalars['ID']>;
  /**
   * Categories of the product
   * @deprecated Use 'categoryTree' field for internationalization support
   */
  categories: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Product's categories */
  categoryTree: Maybe<Array<Maybe<Vtex_Category>>>;
  /** List of related products */
  clusterHighlights: Maybe<Array<Maybe<Vtex_ClusterHighlight>>>;
  productClusters: Maybe<Array<Maybe<Vtex_ProductClusters>>>;
  /** Product description */
  description: Maybe<Scalars['String']>;
  /** SKU objects of the product */
  items: Maybe<Array<Maybe<Vtex_Sku>>>;
  /** List of SKU Specifications */
  skuSpecifications: Maybe<Array<Maybe<Vtex_SkuSpecification>>>;
  /** Product URL */
  link: Maybe<Scalars['String']>;
  /** Product slug */
  linkText: Maybe<Scalars['String']>;
  /** Product ID */
  productId: Maybe<Scalars['ID']>;
  /** Product name */
  productName: Maybe<Scalars['String']>;
  /** Array of product properties */
  properties: Maybe<Array<Maybe<Vtex_Property>>>;
  /** Array of product properties */
  propertyGroups: Maybe<Array<Maybe<Vtex_PropertyGroup>>>;
  /** Product reference */
  productReference: Maybe<Scalars['String']>;
  /** Title used by html tag */
  titleTag: Maybe<Scalars['String']>;
  /** Description used by html tag */
  metaTagDescription: Maybe<Scalars['String']>;
  /** Related Products */
  recommendations: Maybe<Vtex_Recommendation>;
  /** JSON specification of the product */
  jsonSpecifications: Maybe<Scalars['String']>;
  /** List of benefits associated with this product */
  benefits: Maybe<Array<Maybe<Vtex_Benefit>>>;
  itemMetadata: Maybe<Vtex_ItemMetadata>;
  /** Array of product SpecificationGroup */
  specificationGroups: Maybe<Array<Maybe<Vtex_SpecificationGroup>>>;
  /** Returns highest and lowest prices for available SKUs in product. */
  priceRange: Maybe<Vtex_ProductPriceRange>;
  /** Product Release Date, for list ordering and product cluster highlight */
  releaseDate: Maybe<Scalars['String']>;
  /** Product properties that will be selected by default. e.g: {key: "Color", value: "Blue"} */
  selectedProperties: Maybe<Array<Maybe<Vtex_SelectedProperty>>>;
};


type Vtex_ProductItemsArgs = {
  filter: Maybe<Vtex_ItemsFilter>;
};

type Vtex_Category = {
  /**  id is used as cacheId  */
  cacheId: Maybe<Scalars['ID']>;
  /**  URI of category  */
  href: Maybe<Scalars['String']>;
  /**  Category text link  */
  slug: Maybe<Scalars['String']>;
  /**  Category ID  */
  id: Maybe<Scalars['Int']>;
  /**  Category name  */
  name: Maybe<Scalars['String']>;
  /**  Title used by html tag */
  titleTag: Maybe<Scalars['String']>;
  /**  Description used by html tag */
  hasChildren: Maybe<Scalars['Boolean']>;
  /**  Has children categories  */
  metaTagDescription: Maybe<Scalars['String']>;
  /**  Categories children  */
  children: Maybe<Array<Maybe<Vtex_Category>>>;
};

type Vtex_ClusterHighlight = {
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

type Vtex_ProductClusters = {
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

type Vtex_ItemsFilter =
  /** Returns all items, same as no filter. */
  | 'ALL'
  /** Returns only the first available item. Returns first if no item is available. */
  | 'FIRST_AVAILABLE'
  /** Returns all available items. Returns first if no item is available. */
  | 'ALL_AVAILABLE';

type Vtex_Sku = {
  itemId: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  nameComplete: Maybe<Scalars['String']>;
  complementName: Maybe<Scalars['String']>;
  ean: Maybe<Scalars['String']>;
  referenceId: Maybe<Array<Maybe<Vtex_Reference>>>;
  measurementUnit: Maybe<Scalars['String']>;
  unitMultiplier: Maybe<Scalars['Float']>;
  kitItems: Maybe<Array<Maybe<Vtex_KitItem>>>;
  images: Maybe<Array<Maybe<Vtex_Image>>>;
  videos: Maybe<Array<Maybe<Vtex_Video>>>;
  sellers: Maybe<Array<Maybe<Vtex_Seller>>>;
  variations: Maybe<Array<Maybe<Vtex_Property>>>;
  /** @deprecated Use itemMetaData instead */
  attachments: Maybe<Array<Maybe<Vtex_Attachment>>>;
  estimatedDateArrival: Maybe<Scalars['String']>;
};


type Vtex_SkuImagesArgs = {
  quantity: Maybe<Scalars['Int']>;
};

type Vtex_Reference = {
  Key: Maybe<Scalars['String']>;
  Value: Maybe<Scalars['String']>;
};

type Vtex_KitItem = {
  itemId: Maybe<Scalars['ID']>;
  amount: Maybe<Scalars['Int']>;
  product: Maybe<Vtex_OnlyProduct>;
  sku: Maybe<Vtex_Sku>;
};

type Vtex_OnlyProduct = {
  brand: Maybe<Scalars['String']>;
  categoryId: Maybe<Scalars['ID']>;
  categoryTree: Maybe<Array<Maybe<Vtex_Category>>>;
  clusterHighlights: Maybe<Array<Maybe<Vtex_ClusterHighlight>>>;
  productClusters: Maybe<Array<Maybe<Vtex_ProductClusters>>>;
  description: Maybe<Scalars['String']>;
  link: Maybe<Scalars['String']>;
  linkText: Maybe<Scalars['String']>;
  productId: Maybe<Scalars['ID']>;
  productName: Maybe<Scalars['String']>;
  properties: Maybe<Array<Maybe<Vtex_Property>>>;
  propertyGroups: Maybe<Array<Maybe<Vtex_PropertyGroup>>>;
  productReference: Maybe<Scalars['String']>;
  recommendations: Maybe<Vtex_Recommendation>;
  jsonSpecifications: Maybe<Scalars['String']>;
};

type Vtex_Property = {
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Scalars['String']>>>;
};

type Vtex_PropertyGroup = {
  name: Maybe<Scalars['String']>;
  properties: Maybe<Array<Maybe<Scalars['String']>>>;
};

type Vtex_Recommendation = {
  buy: Maybe<Array<Maybe<Vtex_Product>>>;
  view: Maybe<Array<Maybe<Vtex_Product>>>;
  similars: Maybe<Array<Maybe<Vtex_Product>>>;
};

type Vtex_Image = {
  cacheId: Maybe<Scalars['ID']>;
  imageId: Maybe<Scalars['ID']>;
  imageLabel: Maybe<Scalars['String']>;
  imageTag: Maybe<Scalars['String']>;
  imageUrl: Maybe<Scalars['String']>;
  imageText: Maybe<Scalars['String']>;
};

type Vtex_Video = {
  videoUrl: Maybe<Scalars['String']>;
};

type Vtex_Seller = {
  sellerId: Maybe<Scalars['ID']>;
  sellerName: Maybe<Scalars['String']>;
  addToCartLink: Maybe<Scalars['String']>;
  sellerDefault: Maybe<Scalars['Boolean']>;
  commertialOffer: Maybe<Vtex_Offer>;
};

type Vtex_Offer = {
  Installments: Maybe<Array<Maybe<Vtex_Installment>>>;
  Price: Maybe<Scalars['Float']>;
  ListPrice: Maybe<Scalars['Float']>;
  spotPrice: Maybe<Scalars['Float']>;
  PriceWithoutDiscount: Maybe<Scalars['Float']>;
  RewardValue: Maybe<Scalars['Float']>;
  PriceValidUntil: Maybe<Scalars['String']>;
  AvailableQuantity: Maybe<Scalars['Float']>;
  Tax: Maybe<Scalars['Float']>;
  taxPercentage: Maybe<Scalars['Float']>;
  CacheVersionUsedToCallCheckout: Maybe<Scalars['String']>;
  DeliverySlaSamples: Maybe<Array<Maybe<Vtex_DeliverySlaSamples>>>;
  /** List of discount highlights */
  discountHighlights: Maybe<Array<Vtex_Discount>>;
  teasers: Maybe<Array<Vtex_Teaser>>;
  /** List of SKUs for gifts associated with the product */
  giftSkuIds: Maybe<Array<Maybe<Scalars['String']>>>;
  /** List of gifts associated with the product */
  gifts: Maybe<Array<Maybe<Vtex_Gift>>>;
};


type Vtex_OfferInstallmentsArgs = {
  criteria?: Maybe<Vtex_InstallmentsCriteria>;
  rates?: Maybe<Scalars['Boolean']>;
  excludedPaymentSystems: Maybe<Array<Maybe<Scalars['String']>>>;
  includedPaymentSystems: Maybe<Array<Maybe<Scalars['String']>>>;
};

type Vtex_InstallmentsCriteria =
  | 'MAX_WITHOUT_INTEREST'
  | 'MAX_WITH_INTEREST'
  | 'MAX'
  | 'MIN'
  | 'ALL';

type Vtex_Installment = {
  Value: Maybe<Scalars['Float']>;
  InterestRate: Maybe<Scalars['Float']>;
  TotalValuePlusInterestRate: Maybe<Scalars['Float']>;
  NumberOfInstallments: Maybe<Scalars['Int']>;
  PaymentSystemName: Maybe<Scalars['String']>;
  PaymentSystemGroupName: Maybe<Scalars['String']>;
  Name: Maybe<Scalars['String']>;
  count: Scalars['Int'];
  hasInterestRate: Maybe<Scalars['Boolean']>;
  interestRate: Maybe<Scalars['Int']>;
  value: Maybe<Scalars['Float']>;
  total: Scalars['Float'];
};

type Vtex_DeliverySlaSamples = {
  DeliverySlaPerTypes: Maybe<Array<Maybe<Vtex_DeliverySlaPerTypes>>>;
  Region: Maybe<Vtex_Region>;
};

type Vtex_DeliverySlaPerTypes = {
  TypeName: Maybe<Scalars['String']>;
  Price: Maybe<Scalars['Float']>;
  EstimatedTimeSpanToDelivery: Maybe<Scalars['String']>;
};

type Vtex_Region = {
  IsPersisted: Maybe<Scalars['Boolean']>;
  IsRemoved: Maybe<Scalars['Boolean']>;
  Id: Maybe<Scalars['ID']>;
  Name: Maybe<Scalars['String']>;
  CountryCode: Maybe<Scalars['String']>;
  ZipCode: Maybe<Scalars['String']>;
  CultureInfoName: Maybe<Scalars['String']>;
};

/** Discount object */
type Vtex_Discount = {
  /** Discount name */
  name: Maybe<Scalars['String']>;
};

type Vtex_Teaser = {
  name: Maybe<Scalars['String']>;
  conditions: Maybe<Vtex_TeaserCondition>;
  effects: Maybe<Vtex_TeaserEffects>;
};

type Vtex_TeaserCondition = {
  minimumQuantity: Maybe<Scalars['Int']>;
  parameters: Maybe<Array<Maybe<Vtex_TeaserValue>>>;
};

type Vtex_TeaserValue = {
  name: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type Vtex_TeaserEffects = {
  parameters: Maybe<Array<Maybe<Vtex_TeaserValue>>>;
};

type Vtex_Gift = {
  productName: Maybe<Scalars['String']>;
  skuName: Maybe<Scalars['String']>;
  brand: Maybe<Scalars['String']>;
  linkText: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  images: Maybe<Array<Maybe<Vtex_GiftImage>>>;
};

type Vtex_GiftImage = {
  imageUrl: Maybe<Scalars['String']>;
  imageLabel: Maybe<Scalars['String']>;
  imageText: Maybe<Scalars['String']>;
};

type Vtex_Attachment = {
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  required: Maybe<Scalars['Boolean']>;
  domainValues: Maybe<Array<Maybe<Vtex_DomainValues>>>;
  content: Maybe<Scalars['VTEX_AttachmentContent']>;
};

type Vtex_DomainValues = {
  FieldName: Maybe<Scalars['String']>;
  MaxCaracters: Maybe<Scalars['String']>;
  DomainValues: Maybe<Scalars['String']>;
};

type Vtex_SkuSpecification = {
  field: Maybe<Vtex_SkuSpecificationField>;
  values: Maybe<Array<Maybe<Vtex_SkuSpecificationValue>>>;
};

type Vtex_SkuSpecificationField = {
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

type Vtex_SkuSpecificationValue = {
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

/**  Benefit of a Product  */
type Vtex_Benefit = {
  /**  Flag which indicates if the benefit is featured or not  */
  featured: Maybe<Scalars['Boolean']>;
  /**  Id of the product which the benefit is associated  */
  id: Maybe<Scalars['String']>;
  /**  Name of the benefit  */
  name: Maybe<Scalars['String']>;
  /**  Items of the benefit  */
  items: Maybe<Array<Maybe<Vtex_BenefitItem>>>;
  /**  Type of benefit  */
  teaserType: Maybe<Scalars['String']>;
};

type Vtex_BenefitItem = {
  /**  Product itself  */
  benefitProduct: Maybe<Vtex_Product>;
  /**  IDs of the SKU Items that are taking part in the benefit  */
  benefitSKUIds: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  Discount applied to the benefit product  */
  discount: Maybe<Scalars['Float']>;
  /**  Minimum quantity of the benefit product that is required to validate the benefit  */
  minQuantity: Maybe<Scalars['Int']>;
};

type Vtex_ItemMetadata = {
  items: Maybe<Array<Maybe<Vtex_ItemMetadataUnit>>>;
  priceTable: Maybe<Array<Maybe<Vtex_ItemPriceTable>>>;
};

type Vtex_ItemMetadataUnit = {
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  skuName: Maybe<Scalars['String']>;
  productId: Maybe<Scalars['String']>;
  refId: Maybe<Scalars['String']>;
  ean: Maybe<Scalars['String']>;
  imageUrl: Maybe<Scalars['String']>;
  detailUrl: Maybe<Scalars['String']>;
  seller: Maybe<Scalars['String']>;
  assemblyOptions: Maybe<Array<Maybe<Vtex_AssemblyOption>>>;
};

type Vtex_AssemblyOption = {
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  required: Maybe<Scalars['Boolean']>;
  composition: Maybe<Vtex_CompositionType>;
  inputValues: Maybe<Array<Maybe<Vtex_InputValue>>>;
};

type Vtex_CompositionType = {
  minQuantity: Maybe<Scalars['Int']>;
  maxQuantity: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<Vtex_CompositionItem>>>;
};

type Vtex_CompositionItem = {
  id: Maybe<Scalars['ID']>;
  minQuantity: Maybe<Scalars['Int']>;
  maxQuantity: Maybe<Scalars['Int']>;
  initialQuantity: Maybe<Scalars['Int']>;
  priceTable: Maybe<Scalars['String']>;
  seller: Maybe<Scalars['String']>;
};

type Vtex_InputValue = {
  label: Maybe<Scalars['String']>;
  maxLength: Maybe<Scalars['Int']>;
  type: Maybe<Vtex_InputValueType>;
  defaultValue: Maybe<Scalars['VTEX_StringOrBoolean']>;
  domain: Maybe<Array<Maybe<Scalars['String']>>>;
};

type Vtex_InputValueType =
  | 'TEXT'
  | 'BOOLEAN'
  | 'OPTIONS';


type Vtex_ItemPriceTable = {
  type: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Vtex_PriceTableItem>>>;
};

type Vtex_PriceTableItem = {
  id: Maybe<Scalars['String']>;
  assemblyId: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

type Vtex_SpecificationGroup = {
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  specifications: Maybe<Array<Maybe<Vtex_SpecificationGroupProperty>>>;
};

type Vtex_SpecificationGroupProperty = {
  originalName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Scalars['String']>>>;
};

type Vtex_ProductPriceRange = {
  sellingPrice: Maybe<Vtex_PriceRange>;
  listPrice: Maybe<Vtex_PriceRange>;
};

type Vtex_PriceRange = {
  highPrice: Maybe<Scalars['Float']>;
  lowPrice: Maybe<Scalars['Float']>;
};

type Vtex_SelectedProperty = {
  key: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type Vtex_SelectedFacetInput = {
  key: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type Vtex_Banners = {
  banners: Maybe<Array<Maybe<Vtex_SearchBanner>>>;
};

type Vtex_SearchBanner = {
  id: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  area: Maybe<Scalars['String']>;
  html: Maybe<Scalars['String']>;
};

type Vtex_Correction = {
  correction: Maybe<Vtex_SearchCorrection>;
};

type Vtex_SearchCorrection = {
  text: Maybe<Scalars['String']>;
  highlighted: Maybe<Scalars['String']>;
  misspelled: Maybe<Scalars['Boolean']>;
  correction: Maybe<Scalars['Boolean']>;
};

type Vtex_SearchSuggestions = {
  searches: Maybe<Array<Maybe<Vtex_SearchSuggestion>>>;
};

type Vtex_SearchSuggestion = {
  term: Scalars['String'];
  count: Scalars['Int'];
  attributes: Maybe<Array<Maybe<Vtex_SearchSuggestionAttribute>>>;
};

type Vtex_SearchSuggestionAttribute = {
  key: Scalars['String'];
  value: Scalars['String'];
  labelValue: Scalars['String'];
};

type Vtex_SimulationBehavior =
  /** Does simulation on catalog as usual */
  | 'default'
  /** Does simulation on catalog only for seller 1P */
  | 'only1P'
  /** Calls catalog passing a parameter to not simulate each SKU and get its most up to date price. */
  | 'skip'
  /** Does the simulation on the client side */
  | 'async';

type Vtex_Operator =
  | 'and'
  | 'or';

type Vtex_Options = {
  /** If the search has a redirect enabled, this allows (`true`) or not (`false`) the redirect to be used */
  allowRedirect: Maybe<Scalars['Boolean']>;
};

type Vtex_ProductSearch = {
  products: Maybe<Array<Maybe<Vtex_Product>>>;
  recordsFiltered: Maybe<Scalars['Int']>;
  titleTag: Maybe<Scalars['String']>;
  metaTagDescription: Maybe<Scalars['String']>;
  breadcrumb: Maybe<Array<Maybe<Vtex_SearchBreadcrumb>>>;
  canonical: Maybe<Scalars['String']>;
  suggestion: Maybe<Vtex_SearchSuggestions>;
  correction: Maybe<Vtex_SearchCorrection>;
  operator: Maybe<Vtex_Operator>;
  fuzzy: Maybe<Scalars['String']>;
  searchState: Maybe<Scalars['String']>;
  banners: Maybe<Array<Maybe<Vtex_SearchBanner>>>;
  redirect: Maybe<Scalars['String']>;
};

type Vtex_SearchBreadcrumb = {
  name: Maybe<Scalars['String']>;
  href: Maybe<Scalars['String']>;
};

type Vtex_SearchMetadata = {
  titleTag: Maybe<Scalars['String']>;
  metaTagDescription: Maybe<Scalars['String']>;
};

type Vtex_CrossSelingInputEnum =
  | 'buy'
  | 'similars'
  | 'view'
  | 'viewAndBought'
  | 'accessories'
  | 'suggestions';

type Vtex_CategoryTreeBehavior =
  /** Uses the default value set by the search provider */
  | 'default'
  /** Show the category tree when it is possible */
  | 'show'
  /** Hide the category tree in any situation */
  | 'hide';

type Vtex_Facets = {
  departments: Maybe<Array<Maybe<Vtex_DepartmentFacet>>>;
  brands: Maybe<Array<Maybe<Vtex_BrandFacet>>>;
  specificationFilters: Maybe<Array<Maybe<Vtex_FilterFacets>>>;
  categoriesTrees: Maybe<Array<Maybe<Vtex_CategoriesTreeFacet>>>;
  priceRanges: Maybe<Array<Maybe<Vtex_PriceRangesFacet>>>;
  recordsFiltered: Maybe<Scalars['Int']>;
  queryArgs: Maybe<Vtex_QueryArgs>;
  facets: Maybe<Array<Maybe<Vtex_Facet>>>;
  sampling: Maybe<Scalars['Boolean']>;
  breadcrumb: Maybe<Array<Maybe<Vtex_SearchBreadcrumb>>>;
};

type Vtex_DepartmentFacet = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

type Vtex_BrandFacet = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name: Scalars['String'];
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

type Vtex_FilterFacets = {
  name: Maybe<Scalars['String']>;
  facets: Maybe<Array<Maybe<Vtex_FilterFacet>>>;
};

type Vtex_FilterFacet = {
  quantity: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

type Vtex_CategoriesTreeFacet = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  /** Contains slugified links according to the store structure. /:department/d, /:category/:subcategory, etc */
  href: Scalars['String'];
  map: Maybe<Scalars['String']>;
  value: Scalars['String'];
  children: Maybe<Array<Maybe<Vtex_CategoriesTreeFacet>>>;
  selected: Scalars['Boolean'];
};

type Vtex_PriceRangesFacet = {
  quantity: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
  slug: Maybe<Scalars['String']>;
};

type Vtex_QueryArgs = {
  map: Maybe<Scalars['String']>;
  query: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<Maybe<Vtex_SelectedFacet>>>;
};

type Vtex_SelectedFacet = {
  key: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
};

type Vtex_Facet = {
  name: Maybe<Scalars['String']>;
  values: Maybe<Array<Maybe<Vtex_FacetValue>>>;
  type: Maybe<Vtex_FilterType>;
  hidden: Maybe<Scalars['Boolean']>;
  quantity: Maybe<Scalars['Int']>;
};


type Vtex_FacetValuesArgs = {
  from: Maybe<Scalars['Int']>;
  to: Maybe<Scalars['Int']>;
};

type Vtex_FacetValue = {
  id: Maybe<Scalars['ID']>;
  quantity: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  key: Maybe<Scalars['String']>;
  value: Maybe<Scalars['String']>;
  selected: Maybe<Scalars['Boolean']>;
  children: Maybe<Array<Maybe<Vtex_FacetValue>>>;
  range: Maybe<Vtex_Range>;
  link: Maybe<Scalars['String']>;
  linkEncoded: Maybe<Scalars['String']>;
  href: Maybe<Scalars['String']>;
};

type Vtex_Range = {
  from: Maybe<Scalars['Float']>;
  to: Maybe<Scalars['Float']>;
};

type Vtex_FilterType =
  | 'TEXT'
  | 'NUMBER'
  | 'CATEGORYTREE'
  | 'BRAND'
  | 'PRICERANGE';

type Vtex_Suggestions = {
  /**  searchTerm from Query autocomplete is used as cacheId  */
  cacheId: Maybe<Scalars['ID']>;
  itemsReturned: Maybe<Array<Maybe<Vtex_Items>>>;
};

type Vtex_Items = {
  thumb: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  href: Maybe<Scalars['String']>;
  criteria: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  productId: Maybe<Scalars['String']>;
};

type Vtex_ProductSuggestions = {
  /** Number of suggested products */
  count: Scalars['Int'];
  /** Suggested products */
  products: Array<Maybe<Vtex_Product>>;
  /** If the term is misspelled or not */
  misspelled: Maybe<Scalars['Boolean']>;
  /** Indicates how the search-engine will deal with the fullText if there is more than one word. Set `and` if the returned products must have all the words in its metadata or `or` otherwise. */
  operator: Maybe<Vtex_Operator>;
};

type Vtex_Sort =
  | 'ASC'
  | 'DESC';

type Vtex_SearchUrlStats = {
  path: Scalars['String'];
  count: Scalars['Int'];
};

type Vtex_AssemblyOptionInput = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  assemblyId: Scalars['String'];
  seller: Scalars['String'];
  options: Maybe<Array<Vtex_AssemblyOptionInput>>;
  inputValues: Maybe<Scalars['VTEX_InputValues']>;
};

type Vtex = {
  /** Return the banners for a given query */
  banners: Maybe<Vtex_Banners>;
  /** Correct a misspeled term */
  correction: Maybe<Vtex_Correction>;
  /** Get search suggestions */
  searchSuggestions: Maybe<Vtex_SearchSuggestions>;
  /** Returns products list filtered and ordered */
  productSearch: Maybe<Vtex_ProductSearch>;
  searchMetadata: Maybe<Vtex_SearchMetadata>;
  /** Returns products list filtered and ordered */
  products: Maybe<Array<Maybe<Vtex_Product>>>;
  productRecommendations: Maybe<Array<Maybe<Vtex_Product>>>;
  productsByIdentifier: Maybe<Array<Maybe<Vtex_Product>>>;
  /** Returns facets category */
  facets: Maybe<Vtex_Facets>;
  /** Get auto complete suggestions in search */
  autocomplete: Maybe<Vtex_Suggestions>;
  /** Get top searches from store */
  topSearches: Maybe<Vtex_SearchSuggestions>;
  /** Get autocomplete search suggestions */
  autocompleteSearchSuggestions: Maybe<Vtex_SearchSuggestions>;
  /** Get product suggestions */
  productSuggestions: Maybe<Vtex_ProductSuggestions>;
  /** Get search urls access stats count */
  searchURLsCount: Maybe<Array<Maybe<Vtex_SearchUrlStats>>>;
  getCardSessionId: Maybe<Scalars['String']>;
  orderForm: Vtex_OrderForm;
  checkoutProfile: Maybe<Vtex_CheckoutProfile>;
  shippingSLA: Maybe<Vtex_Shipping>;
  product: StoreProduct;
};


type VtexBannersArgs = {
  fullText?: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<Maybe<Vtex_SelectedFacetInput>>>;
};


type VtexCorrectionArgs = {
  fullText?: Maybe<Scalars['String']>;
};


type VtexSearchSuggestionsArgs = {
  fullText: Scalars['String'];
};


type VtexProductSearchArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<Maybe<Vtex_SelectedFacetInput>>>;
  category?: Maybe<Scalars['String']>;
  specificationFilters: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<Vtex_SimulationBehavior>;
  productOriginVtex?: Maybe<Scalars['Boolean']>;
  operator: Maybe<Vtex_Operator>;
  fuzzy: Maybe<Scalars['String']>;
  searchState: Maybe<Scalars['String']>;
  options: Maybe<Vtex_Options>;
};


type VtexSearchMetadataArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<Maybe<Vtex_SelectedFacetInput>>>;
};


type VtexProductsArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  specificationFilters: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<Vtex_SimulationBehavior>;
};


type VtexProductRecommendationsArgs = {
  identifier: Maybe<Vtex_ProductUniqueIdentifier>;
  type: Maybe<Vtex_CrossSelingInputEnum>;
};


type VtexProductsByIdentifierArgs = {
  field: Vtex_ProductUniqueIdentifierField;
  values: Maybe<Array<Scalars['ID']>>;
  salesChannel: Maybe<Scalars['String']>;
};


type VtexFacetsArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<Maybe<Vtex_SelectedFacetInput>>>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  removeHiddenFacets?: Maybe<Scalars['Boolean']>;
  behavior?: Maybe<Scalars['String']>;
  operator: Maybe<Vtex_Operator>;
  fuzzy: Maybe<Scalars['String']>;
  searchState: Maybe<Scalars['String']>;
  from: Maybe<Scalars['Int']>;
  to: Maybe<Scalars['Int']>;
  categoryTreeBehavior?: Maybe<Vtex_CategoryTreeBehavior>;
  initialAttributes: Maybe<Scalars['String']>;
};


type VtexAutocompleteArgs = {
  maxRows?: Maybe<Scalars['Int']>;
  searchTerm: Maybe<Scalars['String']>;
};


type VtexAutocompleteSearchSuggestionsArgs = {
  fullText: Scalars['String'];
};


type VtexProductSuggestionsArgs = {
  fullText: Scalars['String'];
  facetKey: Maybe<Scalars['String']>;
  facetValue: Maybe<Scalars['String']>;
  productOriginVtex?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<Vtex_SimulationBehavior>;
  hideUnavailableItems: Maybe<Scalars['Boolean']>;
  regionId: Maybe<Scalars['String']>;
  salesChannel: Maybe<Scalars['Int']>;
};


type VtexSearchUrLsCountArgs = {
  limit?: Maybe<Scalars['Int']>;
  sort: Maybe<Vtex_Sort>;
};


type VtexOrderFormArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  refreshOutdatedData: Maybe<Scalars['Boolean']>;
};


type VtexCheckoutProfileArgs = {
  email: Scalars['String'];
};


type VtexShippingSlaArgs = {
  items: Maybe<Array<Maybe<Vtex_ShippingItem>>>;
  postalCode: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
};


type VtexProductArgs = {
  slug: Scalars['String'];
  regionId: Maybe<Scalars['String']>;
};

type Vtex_OrderForm = {
  id: Scalars['ID'];
  items: Array<Vtex_Item>;
  canEditData: Scalars['Boolean'];
  loggedIn: Scalars['Boolean'];
  userProfileId: Maybe<Scalars['String']>;
  userType: Maybe<Vtex_UserType>;
  shipping: Vtex_Shipping;
  marketingData: Vtex_MarketingData;
  totalizers: Array<Vtex_Totalizer>;
  value: Scalars['Float'];
  messages: Vtex_OrderFormMessages;
  paymentData: Vtex_PaymentData;
  clientProfileData: Maybe<Vtex_ClientData>;
  clientPreferencesData: Maybe<Vtex_ClientPreferencesData>;
  allowManualPrice: Maybe<Scalars['Boolean']>;
  openTextField: Maybe<Vtex_OpenTextField>;
  storePreferencesData: Maybe<Vtex_StorePreferencesData>;
};

type Vtex_Item = {
  additionalInfo: Maybe<Vtex_ItemAdditionalInfo>;
  assemblyOptions: Maybe<Vtex_AssemblyOptionItem>;
  availability: Maybe<Scalars['String']>;
  attachmentOfferings: Array<Vtex_AttachmentOffering>;
  attachments: Array<Vtex_Attachment>;
  bundleItems: Array<Vtex_Item>;
  detailUrl: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  imageUrls: Maybe<Vtex_ImageUrls>;
  listPrice: Maybe<Scalars['Float']>;
  manualPrice: Maybe<Scalars['Float']>;
  measurementUnit: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  offerings: Array<Vtex_Offering>;
  options: Maybe<Array<Maybe<Vtex_AssemblyOptionType>>>;
  parentAssemblyBinding: Maybe<Scalars['String']>;
  parentItemIndex: Maybe<Scalars['Int']>;
  price: Maybe<Scalars['Float']>;
  productCategories: Maybe<Scalars['VTEX_ProductCategoriesObject']>;
  productCategoryIds: Maybe<Scalars['String']>;
  /** Id of the product. Can be null if included inside bundle items. */
  productId: Maybe<Scalars['String']>;
  productRefId: Maybe<Scalars['String']>;
  quantity: Scalars['Float'];
  refId: Maybe<Scalars['String']>;
  /** Product's seller. Can be null if included inside bundle items. */
  seller: Maybe<Scalars['String']>;
  sellingPrice: Maybe<Scalars['Float']>;
  sellingPriceWithAssemblies: Maybe<Scalars['Float']>;
  skuName: Maybe<Scalars['String']>;
  skuSpecifications: Array<Vtex_SkuSpecification>;
  uniqueId: Scalars['String'];
  unitMultiplier: Maybe<Scalars['Float']>;
  priceTags: Array<Vtex_PriceTag>;
  isGift: Scalars['Boolean'];
};

type Vtex_ItemAdditionalInfo = {
  brandName: Maybe<Scalars['String']>;
};

type Vtex_AssemblyOptionItem = {
  added: Array<Maybe<Vtex_AddedOptionItem>>;
  removed: Array<Maybe<Vtex_RemovedOptionItem>>;
  parentPrice: Maybe<Scalars['Float']>;
};

type Vtex_AddedOptionItem = {
  item: Maybe<Vtex_Item>;
  compositionItem: Maybe<Vtex_CompositionItem>;
  normalizedQuantity: Maybe<Scalars['Int']>;
  choiceType: Maybe<Scalars['String']>;
  extraQuantity: Maybe<Scalars['Int']>;
};

type Vtex_RemovedOptionItem = {
  initialQuantity: Maybe<Scalars['Int']>;
  removedQuantity: Maybe<Scalars['Int']>;
  name: Maybe<Scalars['String']>;
};

type Vtex_AttachmentOffering = {
  name: Maybe<Scalars['String']>;
  required: Maybe<Scalars['Boolean']>;
  schema: Maybe<Scalars['VTEX_AttachmentSchema']>;
};



type Vtex_ImageUrls = {
  at1x: Scalars['String'];
  at2x: Scalars['String'];
  at3x: Scalars['String'];
};

type Vtex_Offering = {
  id: Scalars['String'];
  name: Scalars['String'];
  price: Scalars['Int'];
  type: Scalars['String'];
  attachmentOfferings: Array<Vtex_AttachmentOffering>;
};

type Vtex_AssemblyOptionType = {
  assemblyId: Scalars['String'];
  id: Maybe<Scalars['ID']>;
  quantity: Maybe<Scalars['Int']>;
  seller: Maybe<Scalars['String']>;
  inputValues: Maybe<Scalars['VTEX_InputValues']>;
  options: Maybe<Array<Vtex_AssemblyOptionType>>;
};



type Vtex_SkuSpecification = {
  fieldName: Maybe<Scalars['String']>;
  fieldValues: Array<Maybe<Scalars['String']>>;
};

type Vtex_PriceTag = {
  identifier: Maybe<Scalars['String']>;
  isPercentual: Maybe<Scalars['Boolean']>;
  name: Maybe<Scalars['String']>;
  ratesAndBenefitsIdentifier: Maybe<Vtex_RatesAndBenefitsIdentifier>;
  rawValue: Maybe<Scalars['Float']>;
  value: Maybe<Scalars['Int']>;
};

type Vtex_RatesAndBenefitsIdentifier = {
  description: Maybe<Scalars['String']>;
  featured: Maybe<Scalars['Boolean']>;
  id: Maybe<Scalars['String']>;
  matchedParameters: Maybe<Scalars['VTEX_MatchedParameters']>;
  name: Maybe<Scalars['String']>;
};


type Vtex_UserType =
  | 'CALL_CENTER_OPERATOR'
  | 'STORE_USER';

type Vtex_Shipping = {
  countries: Maybe<Array<Maybe<Scalars['String']>>>;
  deliveryOptions: Array<Vtex_DeliveryOption>;
  pickupOptions: Array<Vtex_PickupOption>;
  selectedAddress: Maybe<Vtex_Address>;
  availableAddresses: Maybe<Array<Maybe<Vtex_Address>>>;
  isValid: Scalars['Boolean'];
};

type Vtex_DeliveryOption = {
  id: Scalars['String'];
  deliveryChannel: Scalars['String'];
  price: Scalars['Int'];
  estimate: Scalars['String'];
  isSelected: Scalars['Boolean'];
};

type Vtex_PickupOption = {
  id: Scalars['String'];
  address: Vtex_Address;
  deliveryChannel: Scalars['String'];
  price: Scalars['Int'];
  estimate: Scalars['String'];
  isSelected: Scalars['Boolean'];
  friendlyName: Scalars['String'];
  additionalInfo: Maybe<Scalars['String']>;
  storeDistance: Maybe<Scalars['Float']>;
  transitTime: Maybe<Scalars['String']>;
  businessHours: Array<Vtex_BusinessHour>;
};

type Vtex_Address = {
  addressId: Maybe<Scalars['ID']>;
  addressType: Maybe<Vtex_AddressType>;
  city: Maybe<Scalars['String']>;
  complement: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
  geoCoordinates: Maybe<Array<Maybe<Scalars['Float']>>>;
  neighborhood: Maybe<Scalars['String']>;
  number: Maybe<Scalars['String']>;
  postalCode: Maybe<Scalars['String']>;
  receiverName: Maybe<Scalars['String']>;
  reference: Maybe<Scalars['String']>;
  state: Maybe<Scalars['String']>;
  street: Maybe<Scalars['String']>;
  isDisposable: Maybe<Scalars['Boolean']>;
};

type Vtex_AddressType =
  | 'residential'
  | 'commercial'
  | 'inStore'
  | 'giftRegistry'
  | 'pickup'
  | 'search';

type Vtex_BusinessHour = {
  dayNumber: Scalars['String'];
  closed: Scalars['Boolean'];
  closingTime: Scalars['String'];
  openingTime: Scalars['String'];
};

type Vtex_MarketingData = {
  utmCampaign: Maybe<Scalars['String']>;
  utmMedium: Maybe<Scalars['String']>;
  utmSource: Maybe<Scalars['String']>;
  utmiCampaign: Maybe<Scalars['String']>;
  utmiPart: Maybe<Scalars['String']>;
  utmiPage: Maybe<Scalars['String']>;
  coupon: Maybe<Scalars['String']>;
  marketingTags: Maybe<Array<Scalars['String']>>;
};

type Vtex_Totalizer = {
  id: Scalars['String'];
  name: Maybe<Scalars['String']>;
  value: Scalars['Float'];
};

type Vtex_OrderFormMessages = {
  couponMessages: Array<Vtex_Message>;
  generalMessages: Array<Vtex_Message>;
};

type Vtex_Message = {
  code: Maybe<Scalars['String']>;
  status: Maybe<Scalars['String']>;
  text: Maybe<Scalars['String']>;
};

type Vtex_PaymentData = {
  installmentOptions: Array<Vtex_InstallmentOption>;
  paymentSystems: Array<Vtex_PaymentSystem>;
  payments: Array<Vtex_Payment>;
  availableAccounts: Array<Vtex_AvailableAccount>;
  isValid: Scalars['Boolean'];
};

type Vtex_InstallmentOption = {
  paymentSystem: Scalars['String'];
  bin: Maybe<Scalars['String']>;
  paymentName: Maybe<Scalars['String']>;
  paymentGroupName: Maybe<Scalars['String']>;
  value: Scalars['Float'];
  installments: Array<Vtex_Installment>;
};

type Vtex_PaymentSystem = {
  id: Scalars['String'];
  name: Scalars['String'];
  groupName: Scalars['String'];
  validator: Maybe<Vtex_Validator>;
  stringId: Scalars['String'];
  requiresDocument: Scalars['Boolean'];
  isCustom: Scalars['Boolean'];
  description: Maybe<Scalars['String']>;
  requiresAuthentication: Maybe<Scalars['Boolean']>;
  dueDate: Maybe<Scalars['String']>;
};

type Vtex_Validator = {
  regex: Maybe<Scalars['String']>;
  mask: Maybe<Scalars['String']>;
  cardCodeRegex: Maybe<Scalars['String']>;
  cardCodeMask: Maybe<Scalars['String']>;
  weights: Maybe<Array<Maybe<Scalars['Int']>>>;
  useCvv: Maybe<Scalars['Boolean']>;
  useExpirationDate: Maybe<Scalars['Boolean']>;
  useCardHolderName: Maybe<Scalars['Boolean']>;
  useBillingAddress: Maybe<Scalars['Boolean']>;
};

type Vtex_Payment = {
  paymentSystem: Maybe<Scalars['String']>;
  bin: Maybe<Scalars['String']>;
  accountId: Maybe<Scalars['String']>;
  tokenId: Maybe<Scalars['String']>;
  installments: Maybe<Scalars['Int']>;
  referenceValue: Maybe<Scalars['Float']>;
  value: Maybe<Scalars['Float']>;
};

type Vtex_AvailableAccount = {
  accountId: Scalars['String'];
  paymentSystem: Scalars['String'];
  paymentSystemName: Scalars['String'];
  cardNumber: Scalars['String'];
  bin: Scalars['String'];
};

type Vtex_ClientData = {
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
  document: Maybe<Scalars['String']>;
  documentType: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  corporateName: Maybe<Scalars['String']>;
  tradeName: Maybe<Scalars['String']>;
  corporateDocument: Maybe<Scalars['String']>;
  stateInscription: Maybe<Scalars['String']>;
  corporatePhone: Maybe<Scalars['String']>;
  isCorporate: Maybe<Scalars['Boolean']>;
  profileCompleteOnLoading: Maybe<Scalars['Boolean']>;
  profileErrorOnLoading: Maybe<Scalars['Boolean']>;
  customerClass: Maybe<Scalars['String']>;
  isValid: Scalars['Boolean'];
};

type Vtex_ClientPreferencesData = {
  locale: Maybe<Scalars['String']>;
  optInNewsletter: Maybe<Scalars['Boolean']>;
};

type Vtex_OpenTextField = {
  value: Maybe<Scalars['String']>;
};

type Vtex_StorePreferencesData = {
  countryCode: Maybe<Scalars['String']>;
  currencyCode: Maybe<Scalars['String']>;
  timeZone: Maybe<Scalars['String']>;
  currencyFormatInfo: Maybe<Vtex_CurrencyFormatInfo>;
  currencySymbol: Maybe<Scalars['String']>;
};

type Vtex_CurrencyFormatInfo = {
  currencyDecimalDigits: Maybe<Scalars['Int']>;
  currencyDecimalSeparator: Maybe<Scalars['String']>;
  currencyGroupSeparator: Maybe<Scalars['String']>;
  startsWithCurrencySymbol: Maybe<Scalars['Boolean']>;
};

type Vtex_CheckoutProfile = {
  userProfileId: Maybe<Scalars['String']>;
  profileProvider: Maybe<Scalars['String']>;
  availableAccounts: Array<Vtex_AvailableAccount>;
  availableAddresses: Array<Vtex_Address>;
  userProfile: Maybe<Vtex_UserProfile>;
};

type Vtex_UserProfile = {
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  document: Maybe<Scalars['String']>;
  documentType: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  corporateName: Maybe<Scalars['String']>;
  tradeName: Maybe<Scalars['String']>;
  corporateDocument: Maybe<Scalars['String']>;
  stateInscription: Maybe<Scalars['String']>;
  corporatePhone: Maybe<Scalars['String']>;
  isCorporate: Scalars['Boolean'];
  profileCompleteOnLoading: Maybe<Scalars['String']>;
  profileErrorOnLoading: Maybe<Scalars['String']>;
  customerClass: Maybe<Scalars['String']>;
};

type Vtex_ShippingItem = {
  id: Maybe<Scalars['String']>;
  quantity: Maybe<Scalars['String']>;
  seller: Maybe<Scalars['String']>;
};

type Mutation = {
  addToCart: Vtex_OrderForm;
  updateItems: Vtex_OrderForm;
  addItemOffering: Vtex_OrderForm;
  removeItemOffering: Vtex_OrderForm;
  addBundleItemAttachment: Vtex_OrderForm;
  removeBundleItemAttachment: Vtex_OrderForm;
  insertCoupon: Vtex_OrderForm;
  estimateShipping: Vtex_OrderForm;
  selectDeliveryOption: Vtex_OrderForm;
  selectPickupOption: Vtex_OrderForm;
  /**
   * Changes the currently selected address in the shipping data
   * of the OrderForm
   */
  updateSelectedAddress: Vtex_OrderForm;
  savePaymentToken: Maybe<Vtex_SavePaymentTokenPayload>;
  updateOrderFormProfile: Vtex_OrderForm;
  updateClientPreferencesData: Vtex_OrderForm;
  updateOrderFormPayment: Vtex_OrderForm;
  setManualPrice: Vtex_OrderForm;
  updateItemsOrdination: Vtex_OrderForm;
  clearOrderFormMessages: Vtex_OrderForm;
  updateOrderFormOpenTextField: Vtex_OrderForm;
  updateOrderFormMarketingData: Vtex_OrderForm;
};


type MutationAddToCartArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  items: Maybe<Array<Maybe<Vtex_ItemInput>>>;
  marketingData: Maybe<Vtex_MarketingDataInput>;
  salesChannel: Maybe<Scalars['String']>;
  allowedOutdatedData: Maybe<Array<Scalars['String']>>;
};


type MutationUpdateItemsArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  orderItems: Maybe<Array<Maybe<Vtex_ItemInput>>>;
  splitItem?: Maybe<Scalars['Boolean']>;
  allowedOutdatedData: Maybe<Array<Scalars['String']>>;
};


type MutationAddItemOfferingArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  offeringInput: Maybe<Vtex_OfferingInput>;
};


type MutationRemoveItemOfferingArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  offeringInput: Maybe<Vtex_OfferingInput>;
};


type MutationAddBundleItemAttachmentArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  bundleItemAttachmentInput: Maybe<Vtex_BundleItemAttachmentInput>;
};


type MutationRemoveBundleItemAttachmentArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  bundleItemAttachmentInput: Maybe<Vtex_BundleItemAttachmentInput>;
};


type MutationInsertCouponArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  text: Maybe<Scalars['String']>;
};


type MutationEstimateShippingArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  address: Maybe<Vtex_AddressInput>;
};


type MutationSelectDeliveryOptionArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  deliveryOptionId: Maybe<Scalars['String']>;
};


type MutationSelectPickupOptionArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  pickupOptionId: Maybe<Scalars['String']>;
  itemId: Maybe<Scalars['String']>;
};


type MutationUpdateSelectedAddressArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_AddressInput;
};


type MutationSavePaymentTokenArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  paymentTokens: Maybe<Array<Maybe<Vtex_PaymentToken>>>;
};


type MutationUpdateOrderFormProfileArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_UserProfileInput;
};


type MutationUpdateClientPreferencesDataArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_ClientPreferencesDataInput;
};


type MutationUpdateOrderFormPaymentArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_PaymentDataInput;
};


type MutationSetManualPriceArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_ManualPriceInput;
};


type MutationUpdateItemsOrdinationArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  ascending: Scalars['Boolean'];
  criteria: Vtex_ItemsOrdinationCriteria;
};


type MutationClearOrderFormMessagesArgs = {
  orderFormId: Maybe<Scalars['ID']>;
};


type MutationUpdateOrderFormOpenTextFieldArgs = {
  orderFormId: Maybe<Scalars['ID']>;
  input: Vtex_OrderFormOpenTextInput;
};


type MutationUpdateOrderFormMarketingDataArgs = {
  input: Vtex_MarketingDataInput;
};

type Vtex_ItemInput = {
  id: Maybe<Scalars['Int']>;
  index: Maybe<Scalars['Int']>;
  quantity: Maybe<Scalars['Float']>;
  seller: Maybe<Scalars['ID']>;
  uniqueId: Maybe<Scalars['String']>;
  inputValues: Maybe<Scalars['VTEX_InputValues']>;
  options: Maybe<Array<Maybe<Vtex_AssemblyOptionInput>>>;
};

type Vtex_MarketingDataInput = {
  utmCampaign: Maybe<Scalars['String']>;
  utmMedium: Maybe<Scalars['String']>;
  utmSource: Maybe<Scalars['String']>;
  utmiCampaign: Maybe<Scalars['String']>;
  utmiPart: Maybe<Scalars['String']>;
  utmiPage: Maybe<Scalars['String']>;
  coupon: Maybe<Scalars['String']>;
  marketingTags: Maybe<Array<Scalars['String']>>;
};

type Vtex_OfferingInput = {
  itemIndex: Scalars['Int'];
  offeringId: Scalars['String'];
  offeringInfo: Maybe<Scalars['VTEX_OfferingInfo']>;
};


type Vtex_BundleItemAttachmentInput = {
  itemIndex: Scalars['Int'];
  bundleItemId: Scalars['String'];
  attachmentName: Scalars['String'];
  attachmentContent: Scalars['VTEX_AttachmentContent'];
};

type Vtex_AddressInput = {
  addressId: Maybe<Scalars['ID']>;
  addressType: Maybe<Vtex_AddressType>;
  addressQuery: Maybe<Scalars['String']>;
  city: Maybe<Scalars['String']>;
  complement: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
  geoCoordinates: Maybe<Array<Maybe<Scalars['Float']>>>;
  neighborhood: Maybe<Scalars['String']>;
  number: Maybe<Scalars['String']>;
  postalCode: Maybe<Scalars['String']>;
  receiverName: Maybe<Scalars['String']>;
  reference: Maybe<Scalars['String']>;
  state: Maybe<Scalars['String']>;
  street: Maybe<Scalars['String']>;
  isDisposable: Maybe<Scalars['Boolean']>;
};

type Vtex_PaymentToken = {
  creditCardToken: Scalars['String'];
  paymentSystem: Scalars['String'];
};

type Vtex_SavePaymentTokenPayload = {
  status: Maybe<Scalars['String']>;
};

type Vtex_UserProfileInput = {
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
  document: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  documentType: Maybe<Scalars['String']>;
  isCorporate: Maybe<Scalars['Boolean']>;
  corporateName: Maybe<Scalars['String']>;
  tradeName: Maybe<Scalars['String']>;
  corporateDocument: Maybe<Scalars['String']>;
  stateInscription: Maybe<Scalars['String']>;
};

type Vtex_ClientPreferencesDataInput = {
  optInNewsletter: Maybe<Scalars['Boolean']>;
  locale: Maybe<Scalars['String']>;
};

type Vtex_PaymentDataInput = {
  payments: Array<Vtex_PaymentInput>;
};

type Vtex_PaymentInput = {
  hasDefaultBillingAddress: Maybe<Scalars['Boolean']>;
  installmentsInterestRate: Maybe<Scalars['Int']>;
  paymentSystem: Maybe<Scalars['String']>;
  bin: Maybe<Scalars['String']>;
  accountId: Maybe<Scalars['String']>;
  tokenId: Maybe<Scalars['String']>;
  installments: Maybe<Scalars['Int']>;
  referenceValue: Maybe<Scalars['Int']>;
  value: Maybe<Scalars['Int']>;
};

type Vtex_ManualPriceInput = {
  itemIndex: Scalars['Int'];
  price: Scalars['Float'];
};

type Vtex_ItemsOrdinationCriteria =
  | 'name'
  | 'add_time';

type Vtex_OrderFormOpenTextInput = {
  value: Maybe<Scalars['String']>;
};

type Query = {
  file: Maybe<File>;
  allFile: FileConnection;
  directory: Maybe<Directory>;
  allDirectory: DirectoryConnection;
  site: Maybe<Site>;
  allSite: SiteConnection;
  siteFunction: Maybe<SiteFunction>;
  allSiteFunction: SiteFunctionConnection;
  sitePage: Maybe<SitePage>;
  allSitePage: SitePageConnection;
  storeCollection: Maybe<StoreCollection>;
  allStoreCollection: StoreCollectionConnection;
  storeProduct: Maybe<StoreProduct>;
  allStoreProduct: StoreProductConnection;
  sitePlugin: Maybe<SitePlugin>;
  allSitePlugin: SitePluginConnection;
  siteBuildMetadata: Maybe<SiteBuildMetadata>;
  allSiteBuildMetadata: SiteBuildMetadataConnection;
  channel: Maybe<Channel>;
  allChannel: ChannelConnection;
  vtex: Vtex;
};


type QueryFileArgs = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllFileArgs = {
  filter: Maybe<FileFilterInput>;
  sort: Maybe<FileSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryDirectoryArgs = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllDirectoryArgs = {
  filter: Maybe<DirectoryFilterInput>;
  sort: Maybe<DirectorySortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteArgs = {
  buildTime: Maybe<DateQueryOperatorInput>;
  siteMetadata: Maybe<SiteSiteMetadataFilterInput>;
  proxy: Maybe<SiteProxyFilterListInput>;
  flags: Maybe<SiteFlagsFilterInput>;
  polyfill: Maybe<BooleanQueryOperatorInput>;
  pathPrefix: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllSiteArgs = {
  filter: Maybe<SiteFilterInput>;
  sort: Maybe<SiteSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteFunctionArgs = {
  functionRoute: Maybe<StringQueryOperatorInput>;
  pluginName: Maybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: Maybe<StringQueryOperatorInput>;
  originalRelativeFilePath: Maybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: Maybe<StringQueryOperatorInput>;
  absoluteCompiledFilePath: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllSiteFunctionArgs = {
  filter: Maybe<SiteFunctionFilterInput>;
  sort: Maybe<SiteFunctionSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySitePageArgs = {
  path: Maybe<StringQueryOperatorInput>;
  component: Maybe<StringQueryOperatorInput>;
  internalComponentName: Maybe<StringQueryOperatorInput>;
  componentChunkName: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  isCreatedByStatefulCreatePages: Maybe<BooleanQueryOperatorInput>;
  context: Maybe<SitePageContextFilterInput>;
  pluginCreator: Maybe<SitePluginFilterInput>;
  pluginCreatorId: Maybe<StringQueryOperatorInput>;
};


type QueryAllSitePageArgs = {
  filter: Maybe<SitePageFilterInput>;
  sort: Maybe<SitePageSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryStoreCollectionArgs = {
  id: Maybe<StringQueryOperatorInput>;
  remoteId: Maybe<IdQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  seo: Maybe<StoreCollectionSeoFilterInput>;
  type: Maybe<StoreCollectionTypeQueryOperatorInput>;
  meta: Maybe<StoreCollectionMetaFilterInput>;
  childrenStoreCollection: Maybe<StoreCollectionFilterListInput>;
  childStoreCollection: Maybe<StoreCollectionFilterInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllStoreCollectionArgs = {
  filter: Maybe<StoreCollectionFilterInput>;
  sort: Maybe<StoreCollectionSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryStoreProductArgs = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  productID: Maybe<IdQueryOperatorInput>;
  brand: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  categoryTree: Maybe<StoreCategoryFilterListInput>;
  clusterHighlights: Maybe<StoreClusterHighlightFilterListInput>;
  productClusters: Maybe<StoreProductClustersFilterListInput>;
  items: Maybe<StoreSkuFilterListInput>;
  skuSpecifications: Maybe<StoreSkuSpecificationFilterListInput>;
  link: Maybe<StringQueryOperatorInput>;
  linkText: Maybe<StringQueryOperatorInput>;
  productId: Maybe<IdQueryOperatorInput>;
  productName: Maybe<StringQueryOperatorInput>;
  properties: Maybe<StorePropertyFilterListInput>;
  propertyGroups: Maybe<StorePropertyGroupFilterListInput>;
  productReference: Maybe<StringQueryOperatorInput>;
  titleTag: Maybe<StringQueryOperatorInput>;
  metaTagDescription: Maybe<StringQueryOperatorInput>;
  recommendations: Maybe<StoreRecommendationFilterInput>;
  jsonSpecifications: Maybe<StringQueryOperatorInput>;
  benefits: Maybe<StoreBenefitFilterListInput>;
  specificationGroups: Maybe<StoreSpecificationGroupFilterListInput>;
  priceRange: Maybe<StoreProductPriceRangeFilterInput>;
  releaseDate: Maybe<StringQueryOperatorInput>;
  selectedProperties: Maybe<StoreSelectedPropertyFilterListInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllStoreProductArgs = {
  filter: Maybe<StoreProductFilterInput>;
  sort: Maybe<StoreProductSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySitePluginArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  resolve: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  pluginOptions: Maybe<SitePluginPluginOptionsFilterInput>;
  nodeAPIs: Maybe<StringQueryOperatorInput>;
  browserAPIs: Maybe<StringQueryOperatorInput>;
  ssrAPIs: Maybe<StringQueryOperatorInput>;
  pluginFilepath: Maybe<StringQueryOperatorInput>;
  packageJson: Maybe<SitePluginPackageJsonFilterInput>;
};


type QueryAllSitePluginArgs = {
  filter: Maybe<SitePluginFilterInput>;
  sort: Maybe<SitePluginSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteBuildMetadataArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  buildTime: Maybe<DateQueryOperatorInput>;
};


type QueryAllSiteBuildMetadataArgs = {
  filter: Maybe<SiteBuildMetadataFilterInput>;
  sort: Maybe<SiteBuildMetadataSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryChannelArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  salesChannel: Maybe<IntQueryOperatorInput>;
  canonicalBaseAddress: Maybe<StringQueryOperatorInput>;
  alternateBaseAddresses: Maybe<StringQueryOperatorInput>;
  defaultLocale: Maybe<StringQueryOperatorInput>;
  supportedLocales: Maybe<StringQueryOperatorInput>;
  defaultCurrency: Maybe<StringQueryOperatorInput>;
  supportedCurrencies: Maybe<StringQueryOperatorInput>;
  targetProduct: Maybe<StringQueryOperatorInput>;
};


type QueryAllChannelArgs = {
  filter: Maybe<ChannelFilterInput>;
  sort: Maybe<ChannelSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};

type StringQueryOperatorInput = {
  eq: Maybe<Scalars['String']>;
  ne: Maybe<Scalars['String']>;
  in: Maybe<Array<Maybe<Scalars['String']>>>;
  nin: Maybe<Array<Maybe<Scalars['String']>>>;
  regex: Maybe<Scalars['String']>;
  glob: Maybe<Scalars['String']>;
};

type IntQueryOperatorInput = {
  eq: Maybe<Scalars['Int']>;
  ne: Maybe<Scalars['Int']>;
  gt: Maybe<Scalars['Int']>;
  gte: Maybe<Scalars['Int']>;
  lt: Maybe<Scalars['Int']>;
  lte: Maybe<Scalars['Int']>;
  in: Maybe<Array<Maybe<Scalars['Int']>>>;
  nin: Maybe<Array<Maybe<Scalars['Int']>>>;
};

type DateQueryOperatorInput = {
  eq: Maybe<Scalars['Date']>;
  ne: Maybe<Scalars['Date']>;
  gt: Maybe<Scalars['Date']>;
  gte: Maybe<Scalars['Date']>;
  lt: Maybe<Scalars['Date']>;
  lte: Maybe<Scalars['Date']>;
  in: Maybe<Array<Maybe<Scalars['Date']>>>;
  nin: Maybe<Array<Maybe<Scalars['Date']>>>;
};

type FloatQueryOperatorInput = {
  eq: Maybe<Scalars['Float']>;
  ne: Maybe<Scalars['Float']>;
  gt: Maybe<Scalars['Float']>;
  gte: Maybe<Scalars['Float']>;
  lt: Maybe<Scalars['Float']>;
  lte: Maybe<Scalars['Float']>;
  in: Maybe<Array<Maybe<Scalars['Float']>>>;
  nin: Maybe<Array<Maybe<Scalars['Float']>>>;
};

type NodeFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type NodeFilterListInput = {
  elemMatch: Maybe<NodeFilterInput>;
};

type InternalFilterInput = {
  content: Maybe<StringQueryOperatorInput>;
  contentDigest: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  fieldOwners: Maybe<StringQueryOperatorInput>;
  ignoreType: Maybe<BooleanQueryOperatorInput>;
  mediaType: Maybe<StringQueryOperatorInput>;
  owner: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
};

type BooleanQueryOperatorInput = {
  eq: Maybe<Scalars['Boolean']>;
  ne: Maybe<Scalars['Boolean']>;
  in: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  nin: Maybe<Array<Maybe<Scalars['Boolean']>>>;
};

type FileConnection = {
  totalCount: Scalars['Int'];
  edges: Array<FileEdge>;
  nodes: Array<File>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<FileGroupConnection>;
};


type FileConnectionDistinctArgs = {
  field: FileFieldsEnum;
};


type FileConnectionMaxArgs = {
  field: FileFieldsEnum;
};


type FileConnectionMinArgs = {
  field: FileFieldsEnum;
};


type FileConnectionSumArgs = {
  field: FileFieldsEnum;
};


type FileConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: FileFieldsEnum;
};

type FileEdge = {
  next: Maybe<File>;
  node: File;
  previous: Maybe<File>;
};

type PageInfo = {
  currentPage: Scalars['Int'];
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  itemCount: Scalars['Int'];
  pageCount: Scalars['Int'];
  perPage: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
};

type FileFieldsEnum =
  | 'sourceInstanceName'
  | 'absolutePath'
  | 'relativePath'
  | 'extension'
  | 'size'
  | 'prettySize'
  | 'modifiedTime'
  | 'accessTime'
  | 'changeTime'
  | 'birthTime'
  | 'root'
  | 'dir'
  | 'base'
  | 'ext'
  | 'name'
  | 'relativeDirectory'
  | 'dev'
  | 'mode'
  | 'nlink'
  | 'uid'
  | 'gid'
  | 'rdev'
  | 'ino'
  | 'atimeMs'
  | 'mtimeMs'
  | 'ctimeMs'
  | 'atime'
  | 'mtime'
  | 'ctime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type FileGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<FileEdge>;
  nodes: Array<File>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type FileFilterInput = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type FileSortInput = {
  fields: Maybe<Array<Maybe<FileFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type DirectoryConnection = {
  totalCount: Scalars['Int'];
  edges: Array<DirectoryEdge>;
  nodes: Array<Directory>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<DirectoryGroupConnection>;
};


type DirectoryConnectionDistinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionMaxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionMinArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionSumArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  next: Maybe<Directory>;
  node: Directory;
  previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'sourceInstanceName'
  | 'absolutePath'
  | 'relativePath'
  | 'extension'
  | 'size'
  | 'prettySize'
  | 'modifiedTime'
  | 'accessTime'
  | 'changeTime'
  | 'birthTime'
  | 'root'
  | 'dir'
  | 'base'
  | 'ext'
  | 'name'
  | 'relativeDirectory'
  | 'dev'
  | 'mode'
  | 'nlink'
  | 'uid'
  | 'gid'
  | 'rdev'
  | 'ino'
  | 'atimeMs'
  | 'mtimeMs'
  | 'ctimeMs'
  | 'atime'
  | 'mtime'
  | 'ctime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type DirectoryGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<DirectoryEdge>;
  nodes: Array<Directory>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type DirectoryFilterInput = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type DirectorySortInput = {
  fields: Maybe<Array<Maybe<DirectoryFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteSiteMetadataFilterInput = {
  title: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  titleTemplate: Maybe<StringQueryOperatorInput>;
  author: Maybe<StringQueryOperatorInput>;
  siteUrl: Maybe<StringQueryOperatorInput>;
};

type SiteProxyFilterListInput = {
  elemMatch: Maybe<SiteProxyFilterInput>;
};

type SiteProxyFilterInput = {
  prefix: Maybe<StringQueryOperatorInput>;
  url: Maybe<StringQueryOperatorInput>;
};

type SiteFlagsFilterInput = {
  DEV_SSR: Maybe<BooleanQueryOperatorInput>;
  FAST_DEV: Maybe<BooleanQueryOperatorInput>;
  LMDB_STORE: Maybe<BooleanQueryOperatorInput>;
  PARALLEL_SOURCING: Maybe<BooleanQueryOperatorInput>;
  PARALLEL_QUERY_RUNNING: Maybe<BooleanQueryOperatorInput>;
  PRESERVE_FILE_DOWNLOAD_CACHE: Maybe<BooleanQueryOperatorInput>;
};

type SiteConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteEdge>;
  nodes: Array<Site>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteGroupConnection>;
};


type SiteConnectionDistinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionMaxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionMinArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionSumArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteFieldsEnum;
};

type SiteEdge = {
  next: Maybe<Site>;
  node: Site;
  previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'siteMetadata___title'
  | 'siteMetadata___description'
  | 'siteMetadata___titleTemplate'
  | 'siteMetadata___author'
  | 'siteMetadata___siteUrl'
  | 'proxy'
  | 'proxy___prefix'
  | 'proxy___url'
  | 'flags___DEV_SSR'
  | 'flags___FAST_DEV'
  | 'flags___LMDB_STORE'
  | 'flags___PARALLEL_SOURCING'
  | 'flags___PARALLEL_QUERY_RUNNING'
  | 'flags___PRESERVE_FILE_DOWNLOAD_CACHE'
  | 'polyfill'
  | 'pathPrefix'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type SiteGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteEdge>;
  nodes: Array<Site>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteFilterInput = {
  buildTime: Maybe<DateQueryOperatorInput>;
  siteMetadata: Maybe<SiteSiteMetadataFilterInput>;
  proxy: Maybe<SiteProxyFilterListInput>;
  flags: Maybe<SiteFlagsFilterInput>;
  polyfill: Maybe<BooleanQueryOperatorInput>;
  pathPrefix: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type SiteSortInput = {
  fields: Maybe<Array<Maybe<SiteFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteFunctionConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteFunctionEdge>;
  nodes: Array<SiteFunction>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteFunctionGroupConnection>;
};


type SiteFunctionConnectionDistinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionMaxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionMinArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionSumArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  next: Maybe<SiteFunction>;
  node: SiteFunction;
  previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'functionRoute'
  | 'pluginName'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'relativeCompiledFilePath'
  | 'absoluteCompiledFilePath'
  | 'matchPath'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type SiteFunctionGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteFunctionEdge>;
  nodes: Array<SiteFunction>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteFunctionFilterInput = {
  functionRoute: Maybe<StringQueryOperatorInput>;
  pluginName: Maybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: Maybe<StringQueryOperatorInput>;
  originalRelativeFilePath: Maybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: Maybe<StringQueryOperatorInput>;
  absoluteCompiledFilePath: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type SiteFunctionSortInput = {
  fields: Maybe<Array<Maybe<SiteFunctionFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SitePageContextFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  _xparams: Maybe<SitePageContext_XparamsFilterInput>;
};

type SitePageContext_XparamsFilterInput = {
  slug: Maybe<StringQueryOperatorInput>;
};

type SitePluginFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  resolve: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  pluginOptions: Maybe<SitePluginPluginOptionsFilterInput>;
  nodeAPIs: Maybe<StringQueryOperatorInput>;
  browserAPIs: Maybe<StringQueryOperatorInput>;
  ssrAPIs: Maybe<StringQueryOperatorInput>;
  pluginFilepath: Maybe<StringQueryOperatorInput>;
  packageJson: Maybe<SitePluginPackageJsonFilterInput>;
};

type SitePluginPluginOptionsFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  short_name: Maybe<StringQueryOperatorInput>;
  start_url: Maybe<StringQueryOperatorInput>;
  icon: Maybe<StringQueryOperatorInput>;
  background_color: Maybe<StringQueryOperatorInput>;
  theme_color: Maybe<StringQueryOperatorInput>;
  display: Maybe<StringQueryOperatorInput>;
  cache_busting_mode: Maybe<StringQueryOperatorInput>;
  legacy: Maybe<BooleanQueryOperatorInput>;
  theme_color_in_head: Maybe<BooleanQueryOperatorInput>;
  crossOrigin: Maybe<StringQueryOperatorInput>;
  include_favicon: Maybe<BooleanQueryOperatorInput>;
  env: Maybe<SitePluginPluginOptionsEnvFilterInput>;
  defer: Maybe<BooleanQueryOperatorInput>;
  server: Maybe<StringQueryOperatorInput>;
  basePath: Maybe<StringQueryOperatorInput>;
  sizes: Maybe<StringQueryOperatorInput>;
  color: Maybe<StringQueryOperatorInput>;
  showSpinner: Maybe<BooleanQueryOperatorInput>;
  src: Maybe<StringQueryOperatorInput>;
  _generated: Maybe<StringQueryOperatorInput>;
  compare: Maybe<BooleanQueryOperatorInput>;
  baseline: Maybe<BooleanQueryOperatorInput>;
  html: Maybe<BooleanQueryOperatorInput>;
  json: Maybe<BooleanQueryOperatorInput>;
  outDir: Maybe<StringQueryOperatorInput>;
  stats: Maybe<SitePluginPluginOptionsStatsFilterInput>;
  tenant: Maybe<StringQueryOperatorInput>;
  environment: Maybe<StringQueryOperatorInput>;
  workspace: Maybe<StringQueryOperatorInput>;
  minProducts: Maybe<IntQueryOperatorInput>;
  httpOptions: Maybe<StringQueryOperatorInput>;
  serverOptions: Maybe<StringQueryOperatorInput>;
  path: Maybe<StringQueryOperatorInput>;
  pathCheck: Maybe<BooleanQueryOperatorInput>;
  allExtensions: Maybe<BooleanQueryOperatorInput>;
  isTSX: Maybe<BooleanQueryOperatorInput>;
  jsxPragma: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvFilterInput = {
  production: Maybe<SitePluginPluginOptionsEnvProductionFilterInput>;
  branch_deploy: Maybe<SitePluginPluginOptionsEnvBranch_DeployFilterInput>;
  deploy_preview: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewFilterInput>;
};

type SitePluginPluginOptionsEnvProductionFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvProductionPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvProductionPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvProductionPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvProductionPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  allow: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsStatsFilterInput = {
  context: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  main: Maybe<StringQueryOperatorInput>;
  license: Maybe<StringQueryOperatorInput>;
  dependencies: Maybe<SitePluginPackageJsonDependenciesFilterListInput>;
  devDependencies: Maybe<SitePluginPackageJsonDevDependenciesFilterListInput>;
  peerDependencies: Maybe<SitePluginPackageJsonPeerDependenciesFilterListInput>;
  keywords: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonDependenciesFilterInput>;
};

type SitePluginPackageJsonDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonDevDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonDevDependenciesFilterInput>;
};

type SitePluginPackageJsonDevDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonPeerDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonPeerDependenciesFilterInput>;
};

type SitePluginPackageJsonPeerDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePageConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePageEdge>;
  nodes: Array<SitePage>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SitePageGroupConnection>;
};


type SitePageConnectionDistinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionMaxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionMinArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionSumArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  next: Maybe<SitePage>;
  node: SitePage;
  previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'path'
  | 'component'
  | 'internalComponentName'
  | 'componentChunkName'
  | 'matchPath'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'isCreatedByStatefulCreatePages'
  | 'context___id'
  | 'context___slug'
  | 'context____xparams___slug'
  | 'pluginCreator___id'
  | 'pluginCreator___parent___id'
  | 'pluginCreator___parent___parent___id'
  | 'pluginCreator___parent___parent___children'
  | 'pluginCreator___parent___children'
  | 'pluginCreator___parent___children___id'
  | 'pluginCreator___parent___children___children'
  | 'pluginCreator___parent___internal___content'
  | 'pluginCreator___parent___internal___contentDigest'
  | 'pluginCreator___parent___internal___description'
  | 'pluginCreator___parent___internal___fieldOwners'
  | 'pluginCreator___parent___internal___ignoreType'
  | 'pluginCreator___parent___internal___mediaType'
  | 'pluginCreator___parent___internal___owner'
  | 'pluginCreator___parent___internal___type'
  | 'pluginCreator___children'
  | 'pluginCreator___children___id'
  | 'pluginCreator___children___parent___id'
  | 'pluginCreator___children___parent___children'
  | 'pluginCreator___children___children'
  | 'pluginCreator___children___children___id'
  | 'pluginCreator___children___children___children'
  | 'pluginCreator___children___internal___content'
  | 'pluginCreator___children___internal___contentDigest'
  | 'pluginCreator___children___internal___description'
  | 'pluginCreator___children___internal___fieldOwners'
  | 'pluginCreator___children___internal___ignoreType'
  | 'pluginCreator___children___internal___mediaType'
  | 'pluginCreator___children___internal___owner'
  | 'pluginCreator___children___internal___type'
  | 'pluginCreator___internal___content'
  | 'pluginCreator___internal___contentDigest'
  | 'pluginCreator___internal___description'
  | 'pluginCreator___internal___fieldOwners'
  | 'pluginCreator___internal___ignoreType'
  | 'pluginCreator___internal___mediaType'
  | 'pluginCreator___internal___owner'
  | 'pluginCreator___internal___type'
  | 'pluginCreator___resolve'
  | 'pluginCreator___name'
  | 'pluginCreator___version'
  | 'pluginCreator___pluginOptions___name'
  | 'pluginCreator___pluginOptions___short_name'
  | 'pluginCreator___pluginOptions___start_url'
  | 'pluginCreator___pluginOptions___icon'
  | 'pluginCreator___pluginOptions___background_color'
  | 'pluginCreator___pluginOptions___theme_color'
  | 'pluginCreator___pluginOptions___display'
  | 'pluginCreator___pluginOptions___cache_busting_mode'
  | 'pluginCreator___pluginOptions___legacy'
  | 'pluginCreator___pluginOptions___theme_color_in_head'
  | 'pluginCreator___pluginOptions___crossOrigin'
  | 'pluginCreator___pluginOptions___include_favicon'
  | 'pluginCreator___pluginOptions___defer'
  | 'pluginCreator___pluginOptions___server'
  | 'pluginCreator___pluginOptions___basePath'
  | 'pluginCreator___pluginOptions___sizes'
  | 'pluginCreator___pluginOptions___color'
  | 'pluginCreator___pluginOptions___showSpinner'
  | 'pluginCreator___pluginOptions___src'
  | 'pluginCreator___pluginOptions____generated'
  | 'pluginCreator___pluginOptions___compare'
  | 'pluginCreator___pluginOptions___baseline'
  | 'pluginCreator___pluginOptions___html'
  | 'pluginCreator___pluginOptions___json'
  | 'pluginCreator___pluginOptions___outDir'
  | 'pluginCreator___pluginOptions___stats___context'
  | 'pluginCreator___pluginOptions___tenant'
  | 'pluginCreator___pluginOptions___environment'
  | 'pluginCreator___pluginOptions___workspace'
  | 'pluginCreator___pluginOptions___minProducts'
  | 'pluginCreator___pluginOptions___httpOptions'
  | 'pluginCreator___pluginOptions___serverOptions'
  | 'pluginCreator___pluginOptions___path'
  | 'pluginCreator___pluginOptions___pathCheck'
  | 'pluginCreator___pluginOptions___allExtensions'
  | 'pluginCreator___pluginOptions___isTSX'
  | 'pluginCreator___pluginOptions___jsxPragma'
  | 'pluginCreator___nodeAPIs'
  | 'pluginCreator___browserAPIs'
  | 'pluginCreator___ssrAPIs'
  | 'pluginCreator___pluginFilepath'
  | 'pluginCreator___packageJson___name'
  | 'pluginCreator___packageJson___description'
  | 'pluginCreator___packageJson___version'
  | 'pluginCreator___packageJson___main'
  | 'pluginCreator___packageJson___license'
  | 'pluginCreator___packageJson___dependencies'
  | 'pluginCreator___packageJson___dependencies___name'
  | 'pluginCreator___packageJson___dependencies___version'
  | 'pluginCreator___packageJson___devDependencies'
  | 'pluginCreator___packageJson___devDependencies___name'
  | 'pluginCreator___packageJson___devDependencies___version'
  | 'pluginCreator___packageJson___peerDependencies'
  | 'pluginCreator___packageJson___peerDependencies___name'
  | 'pluginCreator___packageJson___peerDependencies___version'
  | 'pluginCreator___packageJson___keywords'
  | 'pluginCreatorId';

type SitePageGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePageEdge>;
  nodes: Array<SitePage>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SitePageFilterInput = {
  path: Maybe<StringQueryOperatorInput>;
  component: Maybe<StringQueryOperatorInput>;
  internalComponentName: Maybe<StringQueryOperatorInput>;
  componentChunkName: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  isCreatedByStatefulCreatePages: Maybe<BooleanQueryOperatorInput>;
  context: Maybe<SitePageContextFilterInput>;
  pluginCreator: Maybe<SitePluginFilterInput>;
  pluginCreatorId: Maybe<StringQueryOperatorInput>;
};

type SitePageSortInput = {
  fields: Maybe<Array<Maybe<SitePageFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type IdQueryOperatorInput = {
  eq: Maybe<Scalars['ID']>;
  ne: Maybe<Scalars['ID']>;
  in: Maybe<Array<Maybe<Scalars['ID']>>>;
  nin: Maybe<Array<Maybe<Scalars['ID']>>>;
};

type StoreCollectionSeoFilterInput = {
  title: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
};

type StoreCollectionTypeQueryOperatorInput = {
  eq: Maybe<StoreCollectionType>;
  ne: Maybe<StoreCollectionType>;
  in: Maybe<Array<Maybe<StoreCollectionType>>>;
  nin: Maybe<Array<Maybe<StoreCollectionType>>>;
};

type StoreCollectionMetaFilterInput = {
  selectedFacets: Maybe<StoreCollectionFacetFilterListInput>;
};

type StoreCollectionFacetFilterListInput = {
  elemMatch: Maybe<StoreCollectionFacetFilterInput>;
};

type StoreCollectionFacetFilterInput = {
  key: Maybe<StringQueryOperatorInput>;
  value: Maybe<StringQueryOperatorInput>;
};

type StoreCollectionFilterListInput = {
  elemMatch: Maybe<StoreCollectionFilterInput>;
};

type StoreCollectionFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  remoteId: Maybe<IdQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  seo: Maybe<StoreCollectionSeoFilterInput>;
  type: Maybe<StoreCollectionTypeQueryOperatorInput>;
  meta: Maybe<StoreCollectionMetaFilterInput>;
  childrenStoreCollection: Maybe<StoreCollectionFilterListInput>;
  childStoreCollection: Maybe<StoreCollectionFilterInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type StoreCollectionConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreCollectionEdge>;
  nodes: Array<StoreCollection>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<StoreCollectionGroupConnection>;
};


type StoreCollectionConnectionDistinctArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionMaxArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionMinArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionSumArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: StoreCollectionFieldsEnum;
};

type StoreCollectionEdge = {
  next: Maybe<StoreCollection>;
  node: StoreCollection;
  previous: Maybe<StoreCollection>;
};

type StoreCollectionFieldsEnum =
  | 'id'
  | 'remoteId'
  | 'slug'
  | 'seo___title'
  | 'seo___description'
  | 'type'
  | 'meta___selectedFacets'
  | 'meta___selectedFacets___key'
  | 'meta___selectedFacets___value'
  | 'childrenStoreCollection'
  | 'childrenStoreCollection___id'
  | 'childrenStoreCollection___remoteId'
  | 'childrenStoreCollection___slug'
  | 'childrenStoreCollection___seo___title'
  | 'childrenStoreCollection___seo___description'
  | 'childrenStoreCollection___type'
  | 'childrenStoreCollection___meta___selectedFacets'
  | 'childrenStoreCollection___meta___selectedFacets___key'
  | 'childrenStoreCollection___meta___selectedFacets___value'
  | 'childrenStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childrenStoreCollection___id'
  | 'childrenStoreCollection___childrenStoreCollection___remoteId'
  | 'childrenStoreCollection___childrenStoreCollection___slug'
  | 'childrenStoreCollection___childrenStoreCollection___seo___title'
  | 'childrenStoreCollection___childrenStoreCollection___seo___description'
  | 'childrenStoreCollection___childrenStoreCollection___type'
  | 'childrenStoreCollection___childrenStoreCollection___meta___selectedFacets'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___id'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___remoteId'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___slug'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___type'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childrenStoreCollection___childrenStoreCollection___children'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___id'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___remoteId'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___slug'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___type'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childrenStoreCollection___childStoreCollection___children'
  | 'childrenStoreCollection___childrenStoreCollection___parent___id'
  | 'childrenStoreCollection___childrenStoreCollection___parent___children'
  | 'childrenStoreCollection___childrenStoreCollection___children'
  | 'childrenStoreCollection___childrenStoreCollection___children___id'
  | 'childrenStoreCollection___childrenStoreCollection___children___children'
  | 'childrenStoreCollection___childrenStoreCollection___internal___content'
  | 'childrenStoreCollection___childrenStoreCollection___internal___contentDigest'
  | 'childrenStoreCollection___childrenStoreCollection___internal___description'
  | 'childrenStoreCollection___childrenStoreCollection___internal___fieldOwners'
  | 'childrenStoreCollection___childrenStoreCollection___internal___ignoreType'
  | 'childrenStoreCollection___childrenStoreCollection___internal___mediaType'
  | 'childrenStoreCollection___childrenStoreCollection___internal___owner'
  | 'childrenStoreCollection___childrenStoreCollection___internal___type'
  | 'childrenStoreCollection___childStoreCollection___id'
  | 'childrenStoreCollection___childStoreCollection___remoteId'
  | 'childrenStoreCollection___childStoreCollection___slug'
  | 'childrenStoreCollection___childStoreCollection___seo___title'
  | 'childrenStoreCollection___childStoreCollection___seo___description'
  | 'childrenStoreCollection___childStoreCollection___type'
  | 'childrenStoreCollection___childStoreCollection___meta___selectedFacets'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___id'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___remoteId'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___slug'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___type'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childStoreCollection___childrenStoreCollection___children'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___id'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___remoteId'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___slug'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___type'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childrenStoreCollection___childStoreCollection___childStoreCollection___children'
  | 'childrenStoreCollection___childStoreCollection___parent___id'
  | 'childrenStoreCollection___childStoreCollection___parent___children'
  | 'childrenStoreCollection___childStoreCollection___children'
  | 'childrenStoreCollection___childStoreCollection___children___id'
  | 'childrenStoreCollection___childStoreCollection___children___children'
  | 'childrenStoreCollection___childStoreCollection___internal___content'
  | 'childrenStoreCollection___childStoreCollection___internal___contentDigest'
  | 'childrenStoreCollection___childStoreCollection___internal___description'
  | 'childrenStoreCollection___childStoreCollection___internal___fieldOwners'
  | 'childrenStoreCollection___childStoreCollection___internal___ignoreType'
  | 'childrenStoreCollection___childStoreCollection___internal___mediaType'
  | 'childrenStoreCollection___childStoreCollection___internal___owner'
  | 'childrenStoreCollection___childStoreCollection___internal___type'
  | 'childrenStoreCollection___parent___id'
  | 'childrenStoreCollection___parent___parent___id'
  | 'childrenStoreCollection___parent___parent___children'
  | 'childrenStoreCollection___parent___children'
  | 'childrenStoreCollection___parent___children___id'
  | 'childrenStoreCollection___parent___children___children'
  | 'childrenStoreCollection___parent___internal___content'
  | 'childrenStoreCollection___parent___internal___contentDigest'
  | 'childrenStoreCollection___parent___internal___description'
  | 'childrenStoreCollection___parent___internal___fieldOwners'
  | 'childrenStoreCollection___parent___internal___ignoreType'
  | 'childrenStoreCollection___parent___internal___mediaType'
  | 'childrenStoreCollection___parent___internal___owner'
  | 'childrenStoreCollection___parent___internal___type'
  | 'childrenStoreCollection___children'
  | 'childrenStoreCollection___children___id'
  | 'childrenStoreCollection___children___parent___id'
  | 'childrenStoreCollection___children___parent___children'
  | 'childrenStoreCollection___children___children'
  | 'childrenStoreCollection___children___children___id'
  | 'childrenStoreCollection___children___children___children'
  | 'childrenStoreCollection___children___internal___content'
  | 'childrenStoreCollection___children___internal___contentDigest'
  | 'childrenStoreCollection___children___internal___description'
  | 'childrenStoreCollection___children___internal___fieldOwners'
  | 'childrenStoreCollection___children___internal___ignoreType'
  | 'childrenStoreCollection___children___internal___mediaType'
  | 'childrenStoreCollection___children___internal___owner'
  | 'childrenStoreCollection___children___internal___type'
  | 'childrenStoreCollection___internal___content'
  | 'childrenStoreCollection___internal___contentDigest'
  | 'childrenStoreCollection___internal___description'
  | 'childrenStoreCollection___internal___fieldOwners'
  | 'childrenStoreCollection___internal___ignoreType'
  | 'childrenStoreCollection___internal___mediaType'
  | 'childrenStoreCollection___internal___owner'
  | 'childrenStoreCollection___internal___type'
  | 'childStoreCollection___id'
  | 'childStoreCollection___remoteId'
  | 'childStoreCollection___slug'
  | 'childStoreCollection___seo___title'
  | 'childStoreCollection___seo___description'
  | 'childStoreCollection___type'
  | 'childStoreCollection___meta___selectedFacets'
  | 'childStoreCollection___meta___selectedFacets___key'
  | 'childStoreCollection___meta___selectedFacets___value'
  | 'childStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childrenStoreCollection___id'
  | 'childStoreCollection___childrenStoreCollection___remoteId'
  | 'childStoreCollection___childrenStoreCollection___slug'
  | 'childStoreCollection___childrenStoreCollection___seo___title'
  | 'childStoreCollection___childrenStoreCollection___seo___description'
  | 'childStoreCollection___childrenStoreCollection___type'
  | 'childStoreCollection___childrenStoreCollection___meta___selectedFacets'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___id'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___remoteId'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___slug'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___type'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childrenStoreCollection___childrenStoreCollection___children'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___id'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___remoteId'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___slug'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___type'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childrenStoreCollection___childStoreCollection___children'
  | 'childStoreCollection___childrenStoreCollection___parent___id'
  | 'childStoreCollection___childrenStoreCollection___parent___children'
  | 'childStoreCollection___childrenStoreCollection___children'
  | 'childStoreCollection___childrenStoreCollection___children___id'
  | 'childStoreCollection___childrenStoreCollection___children___children'
  | 'childStoreCollection___childrenStoreCollection___internal___content'
  | 'childStoreCollection___childrenStoreCollection___internal___contentDigest'
  | 'childStoreCollection___childrenStoreCollection___internal___description'
  | 'childStoreCollection___childrenStoreCollection___internal___fieldOwners'
  | 'childStoreCollection___childrenStoreCollection___internal___ignoreType'
  | 'childStoreCollection___childrenStoreCollection___internal___mediaType'
  | 'childStoreCollection___childrenStoreCollection___internal___owner'
  | 'childStoreCollection___childrenStoreCollection___internal___type'
  | 'childStoreCollection___childStoreCollection___id'
  | 'childStoreCollection___childStoreCollection___remoteId'
  | 'childStoreCollection___childStoreCollection___slug'
  | 'childStoreCollection___childStoreCollection___seo___title'
  | 'childStoreCollection___childStoreCollection___seo___description'
  | 'childStoreCollection___childStoreCollection___type'
  | 'childStoreCollection___childStoreCollection___meta___selectedFacets'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___id'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___remoteId'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___slug'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___type'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childStoreCollection___childrenStoreCollection___children'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___id'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___remoteId'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___slug'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___type'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___childrenStoreCollection'
  | 'childStoreCollection___childStoreCollection___childStoreCollection___children'
  | 'childStoreCollection___childStoreCollection___parent___id'
  | 'childStoreCollection___childStoreCollection___parent___children'
  | 'childStoreCollection___childStoreCollection___children'
  | 'childStoreCollection___childStoreCollection___children___id'
  | 'childStoreCollection___childStoreCollection___children___children'
  | 'childStoreCollection___childStoreCollection___internal___content'
  | 'childStoreCollection___childStoreCollection___internal___contentDigest'
  | 'childStoreCollection___childStoreCollection___internal___description'
  | 'childStoreCollection___childStoreCollection___internal___fieldOwners'
  | 'childStoreCollection___childStoreCollection___internal___ignoreType'
  | 'childStoreCollection___childStoreCollection___internal___mediaType'
  | 'childStoreCollection___childStoreCollection___internal___owner'
  | 'childStoreCollection___childStoreCollection___internal___type'
  | 'childStoreCollection___parent___id'
  | 'childStoreCollection___parent___parent___id'
  | 'childStoreCollection___parent___parent___children'
  | 'childStoreCollection___parent___children'
  | 'childStoreCollection___parent___children___id'
  | 'childStoreCollection___parent___children___children'
  | 'childStoreCollection___parent___internal___content'
  | 'childStoreCollection___parent___internal___contentDigest'
  | 'childStoreCollection___parent___internal___description'
  | 'childStoreCollection___parent___internal___fieldOwners'
  | 'childStoreCollection___parent___internal___ignoreType'
  | 'childStoreCollection___parent___internal___mediaType'
  | 'childStoreCollection___parent___internal___owner'
  | 'childStoreCollection___parent___internal___type'
  | 'childStoreCollection___children'
  | 'childStoreCollection___children___id'
  | 'childStoreCollection___children___parent___id'
  | 'childStoreCollection___children___parent___children'
  | 'childStoreCollection___children___children'
  | 'childStoreCollection___children___children___id'
  | 'childStoreCollection___children___children___children'
  | 'childStoreCollection___children___internal___content'
  | 'childStoreCollection___children___internal___contentDigest'
  | 'childStoreCollection___children___internal___description'
  | 'childStoreCollection___children___internal___fieldOwners'
  | 'childStoreCollection___children___internal___ignoreType'
  | 'childStoreCollection___children___internal___mediaType'
  | 'childStoreCollection___children___internal___owner'
  | 'childStoreCollection___children___internal___type'
  | 'childStoreCollection___internal___content'
  | 'childStoreCollection___internal___contentDigest'
  | 'childStoreCollection___internal___description'
  | 'childStoreCollection___internal___fieldOwners'
  | 'childStoreCollection___internal___ignoreType'
  | 'childStoreCollection___internal___mediaType'
  | 'childStoreCollection___internal___owner'
  | 'childStoreCollection___internal___type'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type StoreCollectionGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreCollectionEdge>;
  nodes: Array<StoreCollection>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type StoreCollectionSortInput = {
  fields: Maybe<Array<Maybe<StoreCollectionFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type StoreCategoryFilterListInput = {
  elemMatch: Maybe<StoreCategoryFilterInput>;
};

type StoreCategoryFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  cacheId: Maybe<IdQueryOperatorInput>;
  href: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  id: Maybe<IntQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  titleTag: Maybe<StringQueryOperatorInput>;
  hasChildren: Maybe<BooleanQueryOperatorInput>;
  metaTagDescription: Maybe<StringQueryOperatorInput>;
  children: Maybe<StoreCategoryFilterListInput>;
};

type StoreClusterHighlightFilterListInput = {
  elemMatch: Maybe<StoreClusterHighlightFilterInput>;
};

type StoreClusterHighlightFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<IdQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
};

type StoreProductClustersFilterListInput = {
  elemMatch: Maybe<StoreProductClustersFilterInput>;
};

type StoreProductClustersFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<IdQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
};

type StoreSkuFilterListInput = {
  elemMatch: Maybe<StoreSkuFilterInput>;
};

type StoreSkuFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  itemId: Maybe<IdQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  nameComplete: Maybe<StringQueryOperatorInput>;
  complementName: Maybe<StringQueryOperatorInput>;
  ean: Maybe<StringQueryOperatorInput>;
  referenceId: Maybe<StoreReferenceFilterListInput>;
  measurementUnit: Maybe<StringQueryOperatorInput>;
  unitMultiplier: Maybe<FloatQueryOperatorInput>;
  kitItems: Maybe<StoreKitItemFilterListInput>;
  images: Maybe<StoreImageFilterListInput>;
  videos: Maybe<StoreVideoFilterListInput>;
  sellers: Maybe<StoreSellerFilterListInput>;
  variations: Maybe<StorePropertyFilterListInput>;
  attachments: Maybe<StoreAttachmentFilterListInput>;
  estimatedDateArrival: Maybe<StringQueryOperatorInput>;
};

type StoreReferenceFilterListInput = {
  elemMatch: Maybe<StoreReferenceFilterInput>;
};

type StoreReferenceFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  Key: Maybe<StringQueryOperatorInput>;
  Value: Maybe<StringQueryOperatorInput>;
};

type StoreKitItemFilterListInput = {
  elemMatch: Maybe<StoreKitItemFilterInput>;
};

type StoreKitItemFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  itemId: Maybe<IdQueryOperatorInput>;
  amount: Maybe<IntQueryOperatorInput>;
  product: Maybe<StoreOnlyProductFilterInput>;
  sku: Maybe<StoreSkuFilterInput>;
};

type StoreOnlyProductFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  brand: Maybe<StringQueryOperatorInput>;
  categoryId: Maybe<IdQueryOperatorInput>;
  categoryTree: Maybe<StoreCategoryFilterListInput>;
  clusterHighlights: Maybe<StoreClusterHighlightFilterListInput>;
  productClusters: Maybe<StoreProductClustersFilterListInput>;
  description: Maybe<StringQueryOperatorInput>;
  link: Maybe<StringQueryOperatorInput>;
  linkText: Maybe<StringQueryOperatorInput>;
  productId: Maybe<IdQueryOperatorInput>;
  productName: Maybe<StringQueryOperatorInput>;
  properties: Maybe<StorePropertyFilterListInput>;
  propertyGroups: Maybe<StorePropertyGroupFilterListInput>;
  productReference: Maybe<StringQueryOperatorInput>;
  recommendations: Maybe<StoreRecommendationFilterInput>;
  jsonSpecifications: Maybe<StringQueryOperatorInput>;
};

type StorePropertyFilterListInput = {
  elemMatch: Maybe<StorePropertyFilterInput>;
};

type StorePropertyFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  originalName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  values: Maybe<StringQueryOperatorInput>;
};

type StorePropertyGroupFilterListInput = {
  elemMatch: Maybe<StorePropertyGroupFilterInput>;
};

type StorePropertyGroupFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  properties: Maybe<StringQueryOperatorInput>;
};

type StoreRecommendationFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  buy: Maybe<StoreProductFilterListInput>;
  view: Maybe<StoreProductFilterListInput>;
  similars: Maybe<StoreProductFilterListInput>;
};

type StoreProductFilterListInput = {
  elemMatch: Maybe<StoreProductFilterInput>;
};

type StoreProductFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  productID: Maybe<IdQueryOperatorInput>;
  brand: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  categoryTree: Maybe<StoreCategoryFilterListInput>;
  clusterHighlights: Maybe<StoreClusterHighlightFilterListInput>;
  productClusters: Maybe<StoreProductClustersFilterListInput>;
  items: Maybe<StoreSkuFilterListInput>;
  skuSpecifications: Maybe<StoreSkuSpecificationFilterListInput>;
  link: Maybe<StringQueryOperatorInput>;
  linkText: Maybe<StringQueryOperatorInput>;
  productId: Maybe<IdQueryOperatorInput>;
  productName: Maybe<StringQueryOperatorInput>;
  properties: Maybe<StorePropertyFilterListInput>;
  propertyGroups: Maybe<StorePropertyGroupFilterListInput>;
  productReference: Maybe<StringQueryOperatorInput>;
  titleTag: Maybe<StringQueryOperatorInput>;
  metaTagDescription: Maybe<StringQueryOperatorInput>;
  recommendations: Maybe<StoreRecommendationFilterInput>;
  jsonSpecifications: Maybe<StringQueryOperatorInput>;
  benefits: Maybe<StoreBenefitFilterListInput>;
  specificationGroups: Maybe<StoreSpecificationGroupFilterListInput>;
  priceRange: Maybe<StoreProductPriceRangeFilterInput>;
  releaseDate: Maybe<StringQueryOperatorInput>;
  selectedProperties: Maybe<StoreSelectedPropertyFilterListInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type StoreSkuSpecificationFilterListInput = {
  elemMatch: Maybe<StoreSkuSpecificationFilterInput>;
};

type StoreSkuSpecificationFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  field: Maybe<StoreSkuSpecificationFieldFilterInput>;
  values: Maybe<StoreSkuSpecificationValueFilterListInput>;
};

type StoreSkuSpecificationFieldFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  originalName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
};

type StoreSkuSpecificationValueFilterListInput = {
  elemMatch: Maybe<StoreSkuSpecificationValueFilterInput>;
};

type StoreSkuSpecificationValueFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  originalName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
};

type StoreBenefitFilterListInput = {
  elemMatch: Maybe<StoreBenefitFilterInput>;
};

type StoreBenefitFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  featured: Maybe<BooleanQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  items: Maybe<StoreBenefitItemFilterListInput>;
  teaserType: Maybe<StringQueryOperatorInput>;
};

type StoreBenefitItemFilterListInput = {
  elemMatch: Maybe<StoreBenefitItemFilterInput>;
};

type StoreBenefitItemFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  benefitProduct: Maybe<StoreProductFilterInput>;
  benefitSKUIds: Maybe<StringQueryOperatorInput>;
  discount: Maybe<FloatQueryOperatorInput>;
  minQuantity: Maybe<IntQueryOperatorInput>;
};

type StoreSpecificationGroupFilterListInput = {
  elemMatch: Maybe<StoreSpecificationGroupFilterInput>;
};

type StoreSpecificationGroupFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  originalName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  specifications: Maybe<StoreSpecificationGroupPropertyFilterListInput>;
};

type StoreSpecificationGroupPropertyFilterListInput = {
  elemMatch: Maybe<StoreSpecificationGroupPropertyFilterInput>;
};

type StoreSpecificationGroupPropertyFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  originalName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  values: Maybe<StringQueryOperatorInput>;
};

type StoreProductPriceRangeFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  sellingPrice: Maybe<StorePriceRangeFilterInput>;
  listPrice: Maybe<StorePriceRangeFilterInput>;
};

type StorePriceRangeFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  highPrice: Maybe<FloatQueryOperatorInput>;
  lowPrice: Maybe<FloatQueryOperatorInput>;
};

type StoreSelectedPropertyFilterListInput = {
  elemMatch: Maybe<StoreSelectedPropertyFilterInput>;
};

type StoreSelectedPropertyFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  key: Maybe<StringQueryOperatorInput>;
  value: Maybe<StringQueryOperatorInput>;
};

type StoreImageFilterListInput = {
  elemMatch: Maybe<StoreImageFilterInput>;
};

type StoreImageFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  cacheId: Maybe<IdQueryOperatorInput>;
  imageId: Maybe<IdQueryOperatorInput>;
  imageLabel: Maybe<StringQueryOperatorInput>;
  imageTag: Maybe<StringQueryOperatorInput>;
  imageUrl: Maybe<StringQueryOperatorInput>;
  imageText: Maybe<StringQueryOperatorInput>;
};

type StoreVideoFilterListInput = {
  elemMatch: Maybe<StoreVideoFilterInput>;
};

type StoreVideoFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  videoUrl: Maybe<StringQueryOperatorInput>;
};

type StoreSellerFilterListInput = {
  elemMatch: Maybe<StoreSellerFilterInput>;
};

type StoreSellerFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  sellerId: Maybe<IdQueryOperatorInput>;
  sellerName: Maybe<StringQueryOperatorInput>;
  addToCartLink: Maybe<StringQueryOperatorInput>;
  sellerDefault: Maybe<BooleanQueryOperatorInput>;
  commertialOffer: Maybe<StoreOfferFilterInput>;
};

type StoreOfferFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  Installments: Maybe<StoreInstallmentFilterListInput>;
  AvailableQuantity: Maybe<FloatQueryOperatorInput>;
  Price: Maybe<FloatQueryOperatorInput>;
  ListPrice: Maybe<FloatQueryOperatorInput>;
  spotPrice: Maybe<FloatQueryOperatorInput>;
  teasers: Maybe<StoreTeaserFilterListInput>;
  PriceWithoutDiscount: Maybe<FloatQueryOperatorInput>;
  RewardValue: Maybe<FloatQueryOperatorInput>;
  PriceValidUntil: Maybe<StringQueryOperatorInput>;
  Tax: Maybe<FloatQueryOperatorInput>;
  taxPercentage: Maybe<FloatQueryOperatorInput>;
  CacheVersionUsedToCallCheckout: Maybe<StringQueryOperatorInput>;
  DeliverySlaSamples: Maybe<StoreDeliverySlaSamplesFilterListInput>;
  discountHighlights: Maybe<StoreDiscountFilterListInput>;
  giftSkuIds: Maybe<StringQueryOperatorInput>;
  gifts: Maybe<StoreGiftFilterListInput>;
};

type StoreInstallmentFilterListInput = {
  elemMatch: Maybe<StoreInstallmentFilterInput>;
};

type StoreInstallmentFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  Name: Maybe<StringQueryOperatorInput>;
  TotalValuePlusInterestRate: Maybe<FloatQueryOperatorInput>;
  Value: Maybe<FloatQueryOperatorInput>;
  NumberOfInstallments: Maybe<IntQueryOperatorInput>;
  InterestRate: Maybe<FloatQueryOperatorInput>;
  PaymentSystemName: Maybe<StringQueryOperatorInput>;
  PaymentSystemGroupName: Maybe<StringQueryOperatorInput>;
};

type StoreTeaserFilterListInput = {
  elemMatch: Maybe<StoreTeaserFilterInput>;
};

type StoreTeaserFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  conditions: Maybe<StoreTeaserConditionFilterInput>;
  effects: Maybe<StoreTeaserEffectsFilterInput>;
};

type StoreTeaserConditionFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  minimumQuantity: Maybe<IntQueryOperatorInput>;
  parameters: Maybe<StoreTeaserValueFilterListInput>;
};

type StoreTeaserValueFilterListInput = {
  elemMatch: Maybe<StoreTeaserValueFilterInput>;
};

type StoreTeaserValueFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  value: Maybe<StringQueryOperatorInput>;
};

type StoreTeaserEffectsFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  parameters: Maybe<StoreTeaserValueFilterListInput>;
};

type StoreDeliverySlaSamplesFilterListInput = {
  elemMatch: Maybe<StoreDeliverySlaSamplesFilterInput>;
};

type StoreDeliverySlaSamplesFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  DeliverySlaPerTypes: Maybe<StoreDeliverySlaPerTypesFilterListInput>;
  Region: Maybe<StoreRegionFilterInput>;
};

type StoreDeliverySlaPerTypesFilterListInput = {
  elemMatch: Maybe<StoreDeliverySlaPerTypesFilterInput>;
};

type StoreDeliverySlaPerTypesFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  TypeName: Maybe<StringQueryOperatorInput>;
  Price: Maybe<FloatQueryOperatorInput>;
  EstimatedTimeSpanToDelivery: Maybe<StringQueryOperatorInput>;
};

type StoreRegionFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  IsPersisted: Maybe<BooleanQueryOperatorInput>;
  IsRemoved: Maybe<BooleanQueryOperatorInput>;
  Id: Maybe<IdQueryOperatorInput>;
  Name: Maybe<StringQueryOperatorInput>;
  CountryCode: Maybe<StringQueryOperatorInput>;
  ZipCode: Maybe<StringQueryOperatorInput>;
  CultureInfoName: Maybe<StringQueryOperatorInput>;
};

type StoreDiscountFilterListInput = {
  elemMatch: Maybe<StoreDiscountFilterInput>;
};

type StoreDiscountFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
};

type StoreGiftFilterListInput = {
  elemMatch: Maybe<StoreGiftFilterInput>;
};

type StoreGiftFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  productName: Maybe<StringQueryOperatorInput>;
  skuName: Maybe<StringQueryOperatorInput>;
  brand: Maybe<StringQueryOperatorInput>;
  linkText: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  images: Maybe<StoreGiftImageFilterListInput>;
};

type StoreGiftImageFilterListInput = {
  elemMatch: Maybe<StoreGiftImageFilterInput>;
};

type StoreGiftImageFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  imageUrl: Maybe<StringQueryOperatorInput>;
  imageLabel: Maybe<StringQueryOperatorInput>;
  imageText: Maybe<StringQueryOperatorInput>;
};

type StoreAttachmentFilterListInput = {
  elemMatch: Maybe<StoreAttachmentFilterInput>;
};

type StoreAttachmentFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<IdQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  required: Maybe<BooleanQueryOperatorInput>;
  domainValues: Maybe<StoreDomainValuesFilterListInput>;
  content: Maybe<JsonQueryOperatorInput>;
};

type StoreDomainValuesFilterListInput = {
  elemMatch: Maybe<StoreDomainValuesFilterInput>;
};

type StoreDomainValuesFilterInput = {
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  FieldName: Maybe<StringQueryOperatorInput>;
  MaxCaracters: Maybe<StringQueryOperatorInput>;
  DomainValues: Maybe<StringQueryOperatorInput>;
};

type JsonQueryOperatorInput = {
  eq: Maybe<Scalars['JSON']>;
  ne: Maybe<Scalars['JSON']>;
  in: Maybe<Array<Maybe<Scalars['JSON']>>>;
  nin: Maybe<Array<Maybe<Scalars['JSON']>>>;
  regex: Maybe<Scalars['JSON']>;
  glob: Maybe<Scalars['JSON']>;
};

type StoreProductConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreProductEdge>;
  nodes: Array<StoreProduct>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<StoreProductGroupConnection>;
};


type StoreProductConnectionDistinctArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionMaxArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionMinArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionSumArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: StoreProductFieldsEnum;
};

type StoreProductEdge = {
  next: Maybe<StoreProduct>;
  node: StoreProduct;
  previous: Maybe<StoreProduct>;
};

type StoreProductFieldsEnum =
  | 'remoteTypeName'
  | 'id'
  | 'slug'
  | 'name'
  | 'productID'
  | 'brand'
  | 'description'
  | 'categoryTree'
  | 'categoryTree___remoteTypeName'
  | 'categoryTree___cacheId'
  | 'categoryTree___href'
  | 'categoryTree___slug'
  | 'categoryTree___id'
  | 'categoryTree___name'
  | 'categoryTree___titleTag'
  | 'categoryTree___hasChildren'
  | 'categoryTree___metaTagDescription'
  | 'categoryTree___children'
  | 'categoryTree___children___remoteTypeName'
  | 'categoryTree___children___cacheId'
  | 'categoryTree___children___href'
  | 'categoryTree___children___slug'
  | 'categoryTree___children___id'
  | 'categoryTree___children___name'
  | 'categoryTree___children___titleTag'
  | 'categoryTree___children___hasChildren'
  | 'categoryTree___children___metaTagDescription'
  | 'categoryTree___children___children'
  | 'categoryTree___children___children___remoteTypeName'
  | 'categoryTree___children___children___cacheId'
  | 'categoryTree___children___children___href'
  | 'categoryTree___children___children___slug'
  | 'categoryTree___children___children___id'
  | 'categoryTree___children___children___name'
  | 'categoryTree___children___children___titleTag'
  | 'categoryTree___children___children___hasChildren'
  | 'categoryTree___children___children___metaTagDescription'
  | 'categoryTree___children___children___children'
  | 'clusterHighlights'
  | 'clusterHighlights___remoteTypeName'
  | 'clusterHighlights___id'
  | 'clusterHighlights___name'
  | 'productClusters'
  | 'productClusters___remoteTypeName'
  | 'productClusters___id'
  | 'productClusters___name'
  | 'items'
  | 'items___remoteTypeName'
  | 'items___itemId'
  | 'items___name'
  | 'items___nameComplete'
  | 'items___complementName'
  | 'items___ean'
  | 'items___referenceId'
  | 'items___referenceId___remoteTypeName'
  | 'items___referenceId___Key'
  | 'items___referenceId___Value'
  | 'items___measurementUnit'
  | 'items___unitMultiplier'
  | 'items___kitItems'
  | 'items___kitItems___remoteTypeName'
  | 'items___kitItems___itemId'
  | 'items___kitItems___amount'
  | 'items___kitItems___product___remoteTypeName'
  | 'items___kitItems___product___brand'
  | 'items___kitItems___product___categoryId'
  | 'items___kitItems___product___categoryTree'
  | 'items___kitItems___product___clusterHighlights'
  | 'items___kitItems___product___productClusters'
  | 'items___kitItems___product___description'
  | 'items___kitItems___product___link'
  | 'items___kitItems___product___linkText'
  | 'items___kitItems___product___productId'
  | 'items___kitItems___product___productName'
  | 'items___kitItems___product___properties'
  | 'items___kitItems___product___propertyGroups'
  | 'items___kitItems___product___productReference'
  | 'items___kitItems___product___jsonSpecifications'
  | 'items___kitItems___sku___remoteTypeName'
  | 'items___kitItems___sku___itemId'
  | 'items___kitItems___sku___name'
  | 'items___kitItems___sku___nameComplete'
  | 'items___kitItems___sku___complementName'
  | 'items___kitItems___sku___ean'
  | 'items___kitItems___sku___referenceId'
  | 'items___kitItems___sku___measurementUnit'
  | 'items___kitItems___sku___unitMultiplier'
  | 'items___kitItems___sku___kitItems'
  | 'items___kitItems___sku___images'
  | 'items___kitItems___sku___videos'
  | 'items___kitItems___sku___sellers'
  | 'items___kitItems___sku___variations'
  | 'items___kitItems___sku___attachments'
  | 'items___kitItems___sku___estimatedDateArrival'
  | 'items___images'
  | 'items___images___remoteTypeName'
  | 'items___images___cacheId'
  | 'items___images___imageId'
  | 'items___images___imageLabel'
  | 'items___images___imageTag'
  | 'items___images___imageUrl'
  | 'items___images___imageText'
  | 'items___videos'
  | 'items___videos___remoteTypeName'
  | 'items___videos___videoUrl'
  | 'items___sellers'
  | 'items___sellers___remoteTypeName'
  | 'items___sellers___sellerId'
  | 'items___sellers___sellerName'
  | 'items___sellers___addToCartLink'
  | 'items___sellers___sellerDefault'
  | 'items___sellers___commertialOffer___remoteTypeName'
  | 'items___sellers___commertialOffer___Installments'
  | 'items___sellers___commertialOffer___AvailableQuantity'
  | 'items___sellers___commertialOffer___Price'
  | 'items___sellers___commertialOffer___ListPrice'
  | 'items___sellers___commertialOffer___spotPrice'
  | 'items___sellers___commertialOffer___teasers'
  | 'items___sellers___commertialOffer___PriceWithoutDiscount'
  | 'items___sellers___commertialOffer___RewardValue'
  | 'items___sellers___commertialOffer___PriceValidUntil'
  | 'items___sellers___commertialOffer___Tax'
  | 'items___sellers___commertialOffer___taxPercentage'
  | 'items___sellers___commertialOffer___CacheVersionUsedToCallCheckout'
  | 'items___sellers___commertialOffer___DeliverySlaSamples'
  | 'items___sellers___commertialOffer___discountHighlights'
  | 'items___sellers___commertialOffer___giftSkuIds'
  | 'items___sellers___commertialOffer___gifts'
  | 'items___variations'
  | 'items___variations___remoteTypeName'
  | 'items___variations___originalName'
  | 'items___variations___name'
  | 'items___variations___values'
  | 'items___attachments'
  | 'items___attachments___remoteTypeName'
  | 'items___attachments___id'
  | 'items___attachments___name'
  | 'items___attachments___required'
  | 'items___attachments___domainValues'
  | 'items___attachments___domainValues___remoteTypeName'
  | 'items___attachments___domainValues___FieldName'
  | 'items___attachments___domainValues___MaxCaracters'
  | 'items___attachments___domainValues___DomainValues'
  | 'items___attachments___content'
  | 'items___estimatedDateArrival'
  | 'skuSpecifications'
  | 'skuSpecifications___remoteTypeName'
  | 'skuSpecifications___field___remoteTypeName'
  | 'skuSpecifications___field___originalName'
  | 'skuSpecifications___field___name'
  | 'skuSpecifications___values'
  | 'skuSpecifications___values___remoteTypeName'
  | 'skuSpecifications___values___originalName'
  | 'skuSpecifications___values___name'
  | 'link'
  | 'linkText'
  | 'productId'
  | 'productName'
  | 'properties'
  | 'properties___remoteTypeName'
  | 'properties___originalName'
  | 'properties___name'
  | 'properties___values'
  | 'propertyGroups'
  | 'propertyGroups___remoteTypeName'
  | 'propertyGroups___name'
  | 'propertyGroups___properties'
  | 'productReference'
  | 'titleTag'
  | 'metaTagDescription'
  | 'recommendations___remoteTypeName'
  | 'recommendations___buy'
  | 'recommendations___buy___remoteTypeName'
  | 'recommendations___buy___id'
  | 'recommendations___buy___slug'
  | 'recommendations___buy___name'
  | 'recommendations___buy___productID'
  | 'recommendations___buy___brand'
  | 'recommendations___buy___description'
  | 'recommendations___buy___categoryTree'
  | 'recommendations___buy___categoryTree___remoteTypeName'
  | 'recommendations___buy___categoryTree___cacheId'
  | 'recommendations___buy___categoryTree___href'
  | 'recommendations___buy___categoryTree___slug'
  | 'recommendations___buy___categoryTree___id'
  | 'recommendations___buy___categoryTree___name'
  | 'recommendations___buy___categoryTree___titleTag'
  | 'recommendations___buy___categoryTree___hasChildren'
  | 'recommendations___buy___categoryTree___metaTagDescription'
  | 'recommendations___buy___categoryTree___children'
  | 'recommendations___buy___clusterHighlights'
  | 'recommendations___buy___clusterHighlights___remoteTypeName'
  | 'recommendations___buy___clusterHighlights___id'
  | 'recommendations___buy___clusterHighlights___name'
  | 'recommendations___buy___productClusters'
  | 'recommendations___buy___productClusters___remoteTypeName'
  | 'recommendations___buy___productClusters___id'
  | 'recommendations___buy___productClusters___name'
  | 'recommendations___buy___items'
  | 'recommendations___buy___items___remoteTypeName'
  | 'recommendations___buy___items___itemId'
  | 'recommendations___buy___items___name'
  | 'recommendations___buy___items___nameComplete'
  | 'recommendations___buy___items___complementName'
  | 'recommendations___buy___items___ean'
  | 'recommendations___buy___items___referenceId'
  | 'recommendations___buy___items___measurementUnit'
  | 'recommendations___buy___items___unitMultiplier'
  | 'recommendations___buy___items___kitItems'
  | 'recommendations___buy___items___images'
  | 'recommendations___buy___items___videos'
  | 'recommendations___buy___items___sellers'
  | 'recommendations___buy___items___variations'
  | 'recommendations___buy___items___attachments'
  | 'recommendations___buy___items___estimatedDateArrival'
  | 'recommendations___buy___skuSpecifications'
  | 'recommendations___buy___skuSpecifications___remoteTypeName'
  | 'recommendations___buy___skuSpecifications___values'
  | 'recommendations___buy___link'
  | 'recommendations___buy___linkText'
  | 'recommendations___buy___productId'
  | 'recommendations___buy___productName'
  | 'recommendations___buy___properties'
  | 'recommendations___buy___properties___remoteTypeName'
  | 'recommendations___buy___properties___originalName'
  | 'recommendations___buy___properties___name'
  | 'recommendations___buy___properties___values'
  | 'recommendations___buy___propertyGroups'
  | 'recommendations___buy___propertyGroups___remoteTypeName'
  | 'recommendations___buy___propertyGroups___name'
  | 'recommendations___buy___propertyGroups___properties'
  | 'recommendations___buy___productReference'
  | 'recommendations___buy___titleTag'
  | 'recommendations___buy___metaTagDescription'
  | 'recommendations___buy___recommendations___remoteTypeName'
  | 'recommendations___buy___recommendations___buy'
  | 'recommendations___buy___recommendations___view'
  | 'recommendations___buy___recommendations___similars'
  | 'recommendations___buy___jsonSpecifications'
  | 'recommendations___buy___benefits'
  | 'recommendations___buy___benefits___remoteTypeName'
  | 'recommendations___buy___benefits___featured'
  | 'recommendations___buy___benefits___id'
  | 'recommendations___buy___benefits___name'
  | 'recommendations___buy___benefits___items'
  | 'recommendations___buy___benefits___teaserType'
  | 'recommendations___buy___specificationGroups'
  | 'recommendations___buy___specificationGroups___remoteTypeName'
  | 'recommendations___buy___specificationGroups___originalName'
  | 'recommendations___buy___specificationGroups___name'
  | 'recommendations___buy___specificationGroups___specifications'
  | 'recommendations___buy___priceRange___remoteTypeName'
  | 'recommendations___buy___releaseDate'
  | 'recommendations___buy___selectedProperties'
  | 'recommendations___buy___selectedProperties___remoteTypeName'
  | 'recommendations___buy___selectedProperties___key'
  | 'recommendations___buy___selectedProperties___value'
  | 'recommendations___buy___parent___id'
  | 'recommendations___buy___parent___children'
  | 'recommendations___buy___children'
  | 'recommendations___buy___children___id'
  | 'recommendations___buy___children___children'
  | 'recommendations___buy___internal___content'
  | 'recommendations___buy___internal___contentDigest'
  | 'recommendations___buy___internal___description'
  | 'recommendations___buy___internal___fieldOwners'
  | 'recommendations___buy___internal___ignoreType'
  | 'recommendations___buy___internal___mediaType'
  | 'recommendations___buy___internal___owner'
  | 'recommendations___buy___internal___type'
  | 'recommendations___view'
  | 'recommendations___view___remoteTypeName'
  | 'recommendations___view___id'
  | 'recommendations___view___slug'
  | 'recommendations___view___name'
  | 'recommendations___view___productID'
  | 'recommendations___view___brand'
  | 'recommendations___view___description'
  | 'recommendations___view___categoryTree'
  | 'recommendations___view___categoryTree___remoteTypeName'
  | 'recommendations___view___categoryTree___cacheId'
  | 'recommendations___view___categoryTree___href'
  | 'recommendations___view___categoryTree___slug'
  | 'recommendations___view___categoryTree___id'
  | 'recommendations___view___categoryTree___name'
  | 'recommendations___view___categoryTree___titleTag'
  | 'recommendations___view___categoryTree___hasChildren'
  | 'recommendations___view___categoryTree___metaTagDescription'
  | 'recommendations___view___categoryTree___children'
  | 'recommendations___view___clusterHighlights'
  | 'recommendations___view___clusterHighlights___remoteTypeName'
  | 'recommendations___view___clusterHighlights___id'
  | 'recommendations___view___clusterHighlights___name'
  | 'recommendations___view___productClusters'
  | 'recommendations___view___productClusters___remoteTypeName'
  | 'recommendations___view___productClusters___id'
  | 'recommendations___view___productClusters___name'
  | 'recommendations___view___items'
  | 'recommendations___view___items___remoteTypeName'
  | 'recommendations___view___items___itemId'
  | 'recommendations___view___items___name'
  | 'recommendations___view___items___nameComplete'
  | 'recommendations___view___items___complementName'
  | 'recommendations___view___items___ean'
  | 'recommendations___view___items___referenceId'
  | 'recommendations___view___items___measurementUnit'
  | 'recommendations___view___items___unitMultiplier'
  | 'recommendations___view___items___kitItems'
  | 'recommendations___view___items___images'
  | 'recommendations___view___items___videos'
  | 'recommendations___view___items___sellers'
  | 'recommendations___view___items___variations'
  | 'recommendations___view___items___attachments'
  | 'recommendations___view___items___estimatedDateArrival'
  | 'recommendations___view___skuSpecifications'
  | 'recommendations___view___skuSpecifications___remoteTypeName'
  | 'recommendations___view___skuSpecifications___values'
  | 'recommendations___view___link'
  | 'recommendations___view___linkText'
  | 'recommendations___view___productId'
  | 'recommendations___view___productName'
  | 'recommendations___view___properties'
  | 'recommendations___view___properties___remoteTypeName'
  | 'recommendations___view___properties___originalName'
  | 'recommendations___view___properties___name'
  | 'recommendations___view___properties___values'
  | 'recommendations___view___propertyGroups'
  | 'recommendations___view___propertyGroups___remoteTypeName'
  | 'recommendations___view___propertyGroups___name'
  | 'recommendations___view___propertyGroups___properties'
  | 'recommendations___view___productReference'
  | 'recommendations___view___titleTag'
  | 'recommendations___view___metaTagDescription'
  | 'recommendations___view___recommendations___remoteTypeName'
  | 'recommendations___view___recommendations___buy'
  | 'recommendations___view___recommendations___view'
  | 'recommendations___view___recommendations___similars'
  | 'recommendations___view___jsonSpecifications'
  | 'recommendations___view___benefits'
  | 'recommendations___view___benefits___remoteTypeName'
  | 'recommendations___view___benefits___featured'
  | 'recommendations___view___benefits___id'
  | 'recommendations___view___benefits___name'
  | 'recommendations___view___benefits___items'
  | 'recommendations___view___benefits___teaserType'
  | 'recommendations___view___specificationGroups'
  | 'recommendations___view___specificationGroups___remoteTypeName'
  | 'recommendations___view___specificationGroups___originalName'
  | 'recommendations___view___specificationGroups___name'
  | 'recommendations___view___specificationGroups___specifications'
  | 'recommendations___view___priceRange___remoteTypeName'
  | 'recommendations___view___releaseDate'
  | 'recommendations___view___selectedProperties'
  | 'recommendations___view___selectedProperties___remoteTypeName'
  | 'recommendations___view___selectedProperties___key'
  | 'recommendations___view___selectedProperties___value'
  | 'recommendations___view___parent___id'
  | 'recommendations___view___parent___children'
  | 'recommendations___view___children'
  | 'recommendations___view___children___id'
  | 'recommendations___view___children___children'
  | 'recommendations___view___internal___content'
  | 'recommendations___view___internal___contentDigest'
  | 'recommendations___view___internal___description'
  | 'recommendations___view___internal___fieldOwners'
  | 'recommendations___view___internal___ignoreType'
  | 'recommendations___view___internal___mediaType'
  | 'recommendations___view___internal___owner'
  | 'recommendations___view___internal___type'
  | 'recommendations___similars'
  | 'recommendations___similars___remoteTypeName'
  | 'recommendations___similars___id'
  | 'recommendations___similars___slug'
  | 'recommendations___similars___name'
  | 'recommendations___similars___productID'
  | 'recommendations___similars___brand'
  | 'recommendations___similars___description'
  | 'recommendations___similars___categoryTree'
  | 'recommendations___similars___categoryTree___remoteTypeName'
  | 'recommendations___similars___categoryTree___cacheId'
  | 'recommendations___similars___categoryTree___href'
  | 'recommendations___similars___categoryTree___slug'
  | 'recommendations___similars___categoryTree___id'
  | 'recommendations___similars___categoryTree___name'
  | 'recommendations___similars___categoryTree___titleTag'
  | 'recommendations___similars___categoryTree___hasChildren'
  | 'recommendations___similars___categoryTree___metaTagDescription'
  | 'recommendations___similars___categoryTree___children'
  | 'recommendations___similars___clusterHighlights'
  | 'recommendations___similars___clusterHighlights___remoteTypeName'
  | 'recommendations___similars___clusterHighlights___id'
  | 'recommendations___similars___clusterHighlights___name'
  | 'recommendations___similars___productClusters'
  | 'recommendations___similars___productClusters___remoteTypeName'
  | 'recommendations___similars___productClusters___id'
  | 'recommendations___similars___productClusters___name'
  | 'recommendations___similars___items'
  | 'recommendations___similars___items___remoteTypeName'
  | 'recommendations___similars___items___itemId'
  | 'recommendations___similars___items___name'
  | 'recommendations___similars___items___nameComplete'
  | 'recommendations___similars___items___complementName'
  | 'recommendations___similars___items___ean'
  | 'recommendations___similars___items___referenceId'
  | 'recommendations___similars___items___measurementUnit'
  | 'recommendations___similars___items___unitMultiplier'
  | 'recommendations___similars___items___kitItems'
  | 'recommendations___similars___items___images'
  | 'recommendations___similars___items___videos'
  | 'recommendations___similars___items___sellers'
  | 'recommendations___similars___items___variations'
  | 'recommendations___similars___items___attachments'
  | 'recommendations___similars___items___estimatedDateArrival'
  | 'recommendations___similars___skuSpecifications'
  | 'recommendations___similars___skuSpecifications___remoteTypeName'
  | 'recommendations___similars___skuSpecifications___values'
  | 'recommendations___similars___link'
  | 'recommendations___similars___linkText'
  | 'recommendations___similars___productId'
  | 'recommendations___similars___productName'
  | 'recommendations___similars___properties'
  | 'recommendations___similars___properties___remoteTypeName'
  | 'recommendations___similars___properties___originalName'
  | 'recommendations___similars___properties___name'
  | 'recommendations___similars___properties___values'
  | 'recommendations___similars___propertyGroups'
  | 'recommendations___similars___propertyGroups___remoteTypeName'
  | 'recommendations___similars___propertyGroups___name'
  | 'recommendations___similars___propertyGroups___properties'
  | 'recommendations___similars___productReference'
  | 'recommendations___similars___titleTag'
  | 'recommendations___similars___metaTagDescription'
  | 'recommendations___similars___recommendations___remoteTypeName'
  | 'recommendations___similars___recommendations___buy'
  | 'recommendations___similars___recommendations___view'
  | 'recommendations___similars___recommendations___similars'
  | 'recommendations___similars___jsonSpecifications'
  | 'recommendations___similars___benefits'
  | 'recommendations___similars___benefits___remoteTypeName'
  | 'recommendations___similars___benefits___featured'
  | 'recommendations___similars___benefits___id'
  | 'recommendations___similars___benefits___name'
  | 'recommendations___similars___benefits___items'
  | 'recommendations___similars___benefits___teaserType'
  | 'recommendations___similars___specificationGroups'
  | 'recommendations___similars___specificationGroups___remoteTypeName'
  | 'recommendations___similars___specificationGroups___originalName'
  | 'recommendations___similars___specificationGroups___name'
  | 'recommendations___similars___specificationGroups___specifications'
  | 'recommendations___similars___priceRange___remoteTypeName'
  | 'recommendations___similars___releaseDate'
  | 'recommendations___similars___selectedProperties'
  | 'recommendations___similars___selectedProperties___remoteTypeName'
  | 'recommendations___similars___selectedProperties___key'
  | 'recommendations___similars___selectedProperties___value'
  | 'recommendations___similars___parent___id'
  | 'recommendations___similars___parent___children'
  | 'recommendations___similars___children'
  | 'recommendations___similars___children___id'
  | 'recommendations___similars___children___children'
  | 'recommendations___similars___internal___content'
  | 'recommendations___similars___internal___contentDigest'
  | 'recommendations___similars___internal___description'
  | 'recommendations___similars___internal___fieldOwners'
  | 'recommendations___similars___internal___ignoreType'
  | 'recommendations___similars___internal___mediaType'
  | 'recommendations___similars___internal___owner'
  | 'recommendations___similars___internal___type'
  | 'jsonSpecifications'
  | 'benefits'
  | 'benefits___remoteTypeName'
  | 'benefits___featured'
  | 'benefits___id'
  | 'benefits___name'
  | 'benefits___items'
  | 'benefits___items___remoteTypeName'
  | 'benefits___items___benefitProduct___remoteTypeName'
  | 'benefits___items___benefitProduct___id'
  | 'benefits___items___benefitProduct___slug'
  | 'benefits___items___benefitProduct___name'
  | 'benefits___items___benefitProduct___productID'
  | 'benefits___items___benefitProduct___brand'
  | 'benefits___items___benefitProduct___description'
  | 'benefits___items___benefitProduct___categoryTree'
  | 'benefits___items___benefitProduct___clusterHighlights'
  | 'benefits___items___benefitProduct___productClusters'
  | 'benefits___items___benefitProduct___items'
  | 'benefits___items___benefitProduct___skuSpecifications'
  | 'benefits___items___benefitProduct___link'
  | 'benefits___items___benefitProduct___linkText'
  | 'benefits___items___benefitProduct___productId'
  | 'benefits___items___benefitProduct___productName'
  | 'benefits___items___benefitProduct___properties'
  | 'benefits___items___benefitProduct___propertyGroups'
  | 'benefits___items___benefitProduct___productReference'
  | 'benefits___items___benefitProduct___titleTag'
  | 'benefits___items___benefitProduct___metaTagDescription'
  | 'benefits___items___benefitProduct___jsonSpecifications'
  | 'benefits___items___benefitProduct___benefits'
  | 'benefits___items___benefitProduct___specificationGroups'
  | 'benefits___items___benefitProduct___releaseDate'
  | 'benefits___items___benefitProduct___selectedProperties'
  | 'benefits___items___benefitProduct___children'
  | 'benefits___items___benefitSKUIds'
  | 'benefits___items___discount'
  | 'benefits___items___minQuantity'
  | 'benefits___teaserType'
  | 'specificationGroups'
  | 'specificationGroups___remoteTypeName'
  | 'specificationGroups___originalName'
  | 'specificationGroups___name'
  | 'specificationGroups___specifications'
  | 'specificationGroups___specifications___remoteTypeName'
  | 'specificationGroups___specifications___originalName'
  | 'specificationGroups___specifications___name'
  | 'specificationGroups___specifications___values'
  | 'priceRange___remoteTypeName'
  | 'priceRange___sellingPrice___remoteTypeName'
  | 'priceRange___sellingPrice___highPrice'
  | 'priceRange___sellingPrice___lowPrice'
  | 'priceRange___listPrice___remoteTypeName'
  | 'priceRange___listPrice___highPrice'
  | 'priceRange___listPrice___lowPrice'
  | 'releaseDate'
  | 'selectedProperties'
  | 'selectedProperties___remoteTypeName'
  | 'selectedProperties___key'
  | 'selectedProperties___value'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type StoreProductGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreProductEdge>;
  nodes: Array<StoreProduct>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type StoreProductSortInput = {
  fields: Maybe<Array<Maybe<StoreProductFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SitePluginConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePluginEdge>;
  nodes: Array<SitePlugin>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SitePluginGroupConnection>;
};


type SitePluginConnectionDistinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionMaxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionMinArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionSumArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  next: Maybe<SitePlugin>;
  node: SitePlugin;
  previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'resolve'
  | 'name'
  | 'version'
  | 'pluginOptions___name'
  | 'pluginOptions___short_name'
  | 'pluginOptions___start_url'
  | 'pluginOptions___icon'
  | 'pluginOptions___background_color'
  | 'pluginOptions___theme_color'
  | 'pluginOptions___display'
  | 'pluginOptions___cache_busting_mode'
  | 'pluginOptions___legacy'
  | 'pluginOptions___theme_color_in_head'
  | 'pluginOptions___crossOrigin'
  | 'pluginOptions___include_favicon'
  | 'pluginOptions___env___production___policy'
  | 'pluginOptions___env___branch_deploy___policy'
  | 'pluginOptions___env___deploy_preview___policy'
  | 'pluginOptions___defer'
  | 'pluginOptions___server'
  | 'pluginOptions___basePath'
  | 'pluginOptions___sizes'
  | 'pluginOptions___color'
  | 'pluginOptions___showSpinner'
  | 'pluginOptions___src'
  | 'pluginOptions____generated'
  | 'pluginOptions___compare'
  | 'pluginOptions___baseline'
  | 'pluginOptions___html'
  | 'pluginOptions___json'
  | 'pluginOptions___outDir'
  | 'pluginOptions___stats___context'
  | 'pluginOptions___tenant'
  | 'pluginOptions___environment'
  | 'pluginOptions___workspace'
  | 'pluginOptions___minProducts'
  | 'pluginOptions___httpOptions'
  | 'pluginOptions___serverOptions'
  | 'pluginOptions___path'
  | 'pluginOptions___pathCheck'
  | 'pluginOptions___allExtensions'
  | 'pluginOptions___isTSX'
  | 'pluginOptions___jsxPragma'
  | 'nodeAPIs'
  | 'browserAPIs'
  | 'ssrAPIs'
  | 'pluginFilepath'
  | 'packageJson___name'
  | 'packageJson___description'
  | 'packageJson___version'
  | 'packageJson___main'
  | 'packageJson___license'
  | 'packageJson___dependencies'
  | 'packageJson___dependencies___name'
  | 'packageJson___dependencies___version'
  | 'packageJson___devDependencies'
  | 'packageJson___devDependencies___name'
  | 'packageJson___devDependencies___version'
  | 'packageJson___peerDependencies'
  | 'packageJson___peerDependencies___name'
  | 'packageJson___peerDependencies___version'
  | 'packageJson___keywords';

type SitePluginGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePluginEdge>;
  nodes: Array<SitePlugin>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SitePluginSortInput = {
  fields: Maybe<Array<Maybe<SitePluginFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteBuildMetadataConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteBuildMetadataEdge>;
  nodes: Array<SiteBuildMetadata>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteBuildMetadataGroupConnection>;
};


type SiteBuildMetadataConnectionDistinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionMaxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionMinArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionSumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  next: Maybe<SiteBuildMetadata>;
  node: SiteBuildMetadata;
  previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'buildTime';

type SiteBuildMetadataGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteBuildMetadataEdge>;
  nodes: Array<SiteBuildMetadata>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteBuildMetadataFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  buildTime: Maybe<DateQueryOperatorInput>;
};

type SiteBuildMetadataSortInput = {
  fields: Maybe<Array<Maybe<SiteBuildMetadataFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type ChannelConnection = {
  totalCount: Scalars['Int'];
  edges: Array<ChannelEdge>;
  nodes: Array<Channel>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<ChannelGroupConnection>;
};


type ChannelConnectionDistinctArgs = {
  field: ChannelFieldsEnum;
};


type ChannelConnectionMaxArgs = {
  field: ChannelFieldsEnum;
};


type ChannelConnectionMinArgs = {
  field: ChannelFieldsEnum;
};


type ChannelConnectionSumArgs = {
  field: ChannelFieldsEnum;
};


type ChannelConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: ChannelFieldsEnum;
};

type ChannelEdge = {
  next: Maybe<Channel>;
  node: Channel;
  previous: Maybe<Channel>;
};

type ChannelFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'salesChannel'
  | 'canonicalBaseAddress'
  | 'alternateBaseAddresses'
  | 'defaultLocale'
  | 'supportedLocales'
  | 'defaultCurrency'
  | 'supportedCurrencies'
  | 'targetProduct';

type ChannelGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<ChannelEdge>;
  nodes: Array<Channel>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type ChannelFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  salesChannel: Maybe<IntQueryOperatorInput>;
  canonicalBaseAddress: Maybe<StringQueryOperatorInput>;
  alternateBaseAddresses: Maybe<StringQueryOperatorInput>;
  defaultLocale: Maybe<StringQueryOperatorInput>;
  supportedLocales: Maybe<StringQueryOperatorInput>;
  defaultCurrency: Maybe<StringQueryOperatorInput>;
  supportedCurrencies: Maybe<StringQueryOperatorInput>;
  targetProduct: Maybe<StringQueryOperatorInput>;
};

type ChannelSortInput = {
  fields: Maybe<Array<Maybe<ChannelFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};